{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "935d0546",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "650802ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# idx is the 2D indexes (port removed). It is a tuple (x, y). \n",
    "# We have a CSI-RS RE at symbol x[i], and subcarrier y[i].\n",
    "# We want to use only one RE for a set of Neighboring REs (i.e. the ones in the same CDM group) \n",
    "def removeNeighbors(idx):\n",
    "    bmp = np.ones((idx[0].max()+3,idx[1].max()+3),dtype=np.int8)*2\n",
    "    bmp[(idx[0]+1,idx[1]+1)] = 1\n",
    "    x,y = np.where(bmp[:,1:]-bmp[:,:-1]!=-1)\n",
    "    bmp[ (x,y+1) ] = 2\n",
    "    x,y = np.where(bmp[1:,:]-bmp[:-1,:]!=-1)\n",
    "    bmp[ (x+1,y) ] = 2\n",
    "    x,y = np.where(bmp==1)\n",
    "    return (x-1,y-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cf6ff4d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 1., 0., 1., 1., 1., 0., 0., 0., 1.],\n",
       "       [0., 1., 1., 0., 1., 1., 0., 0., 1., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 1., 1., 0., 0., 1., 1.],\n",
       "       [0., 0., 0., 0., 1., 1., 0., 0., 1., 1.],\n",
       "       [1., 1., 0., 0., 0., 0., 0., 0., 1., 1.],\n",
       "       [1., 1., 0., 0., 0., 0., 0., 0., 1., 1.]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx = (np.int32([0,0,0,0,0,0, 1,1,1,1,1,1, 3,3,3,3, 4,4,4,4, 5,5,5,5, 6,6,6,6]), \n",
    "       np.int32([0,1,3,4,5,9, 1,2,4,5,8,9, 4,5,8,9, 4,5,8,9, 0,1,8,9, 0,1,8,9]))\n",
    "a = np.zeros((idx[0].max()+1, idx[1].max()+1))\n",
    "a[idx] = 1\n",
    "a\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8582d00f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 1., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0., 1., 0., 0., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 1., 0., 0., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newIdx = removeNeighbors(idx)\n",
    "a = np.zeros((idx[0].max()+1, idx[1].max()+1))\n",
    "a[newIdx] = 1\n",
    "a\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e61e3025",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
