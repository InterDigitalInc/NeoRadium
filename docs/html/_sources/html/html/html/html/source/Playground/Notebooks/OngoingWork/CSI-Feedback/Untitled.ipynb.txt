{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "df6131de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from neoradium import AntennaElement,AntennaPanel, CsiReport\n",
    "from neoradium import Carrier, PDSCH, Grid, CsiRsConfig, CsiRsSet, CdlChannel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c72a13ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Bandwidth Part Properties:\n",
      "  Resource Blocks: 52 RBs starting at 0 (624 subcarriers)\n",
      "  Subcarrier Spacing: 15 KHz\n",
      "  CP Type: normal\n",
      "  bandwidth: 9360000 Hz\n",
      "  symbolsPerSlot: 14\n",
      "  slotsPerSubFrame: 1\n",
      "  nFFT: 1024\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "16384"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "carrier = Carrier(startRb=0, numRbs=52, spacing=15)\n",
    "bwp = carrier.bwps[0]\n",
    "bwp.print()\n",
    "bwp.symbolLens.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "271a2836",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grid Stats:\n",
      "  GridSize: 34944\n",
      "  UNASSIGNED: 33696\n",
      "  CSIRS_NZP: 1248\n"
     ]
    }
   ],
   "source": [
    "# Create 3 NZP CsiRsSet objects in the CsiRsConfig. All of them are NZP, transmitted on first symbol\n",
    "# of the slot (Symbol 0), use 4 ports, and occupy REs (0,1,2,3), (4,5,6,7), and (8,9,10,11) correspondingly.\n",
    "csiRsConfig = CsiRsConfig([CsiRsSet(\"NZP\", bwp, symbols=[0], freqMap=fm, numPorts=4) for fm in \n",
    "                               [\"001\", \"010\", \"100\"]])  # Different freq. maps for each CsiRsSet\n",
    "# csiRsConfig.print()\n",
    "\n",
    "# Create a grid and put CSI-RS info inside the grid: \n",
    "grid = bwp.createGrid(csiRsConfig.numPorts)\n",
    "csiRsConfig.populateGrid(grid)\n",
    "\n",
    "# Grid Stats:\n",
    "print(\"Grid Stats:\")\n",
    "stats = grid.getStats()\n",
    "for key, value in stats.items(): print(\"  %s: %d\"%(key, value))\n",
    "    \n",
    "# Visualize the grid:\n",
    "# grid.drawMap(ports=range(csiRsConfig.numPorts), reRange=(0,36))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7d8957a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1, 2], dtype=int16), 4)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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x1o1Pn7wgx943cd3vvMdz7jnnnvO67ikpCQjyfzzP//zFeseffRRI8n07du3xvBwO3nypImIiDCSzBtvvFFtXdXvTZ8+fbzuZ/Xq1bU+4lPX+JgwYYKRZHr37l3rOKCuOOEU8GL69OnVTr6Ljo7WPffc4znBr23btlq2bJkiIiK87uPrr7/W7t27tX37ds+lTZs2kqRt27bVev3f/e531bZt2xrXxcTEqGvXrpKkL774otq60tJSzxxHjBhR63X06NFDCQkJkqS8vLxaxwYifxzrgw8+6HVdz5496zTu1ltvlXTl90aS/vjHP0qS7r///lrfHyY+Pl6pqalXne+oUaO87qdPnz6ej2uaS121b99eklRUVKRNmzY1eD+AG/EB1FOnTp30L//yLyosLFSvXr2uWP/pp5/qBz/4gVq3bq22bduqW7duSk1N9Vyys7MlSceOHav1erp3717r+latWkm69IqLqrZu3arKykpJUlZW1lXfztw9D3+/W+uGDRtkLj3a6vVy+asrrsYfx9qtWzev6+Lj4+s17vLvzf79+/X1119Lkp5//vmrztf9ipfa5lvb7cR9G6lpLvWRlZWlZs2a6fz587rjjjs0bNgwzZs3T9u3b+fVLWgQ3mQM8KLqO5y6XC5FRkYqISFBcXFxXrd56aWXqr18sTZnz56tdX2LFi1qXR8Scun/DhUVFdWWf/XVV3W6/st98803DdrOSf441tq+7u6veV3H2fje1HW+l8+lPrp3764FCxZowoQJOnnypFauXKmVK1dKkhISEpSRkaGJEyfqrrvuavB14NpCfABe1PQOp7VZv369Jzw6d+6sn/70p7rzzjvVsWNHRUVFKSzs0o/b1KlTNWPGDL/MWap+J/P666/r9ttvr9N2LVu29NeU/CbYjrXqfKdOnaoHHnigTttFRUX5a0p1dv/992vw4MFauHCh/ud//keffPKJvv76ax07dkzz58/X/PnzNXbsWOXk5FSLHqAmxAfgI+6nU1q2bKmNGzd6zu24XE1v+uRLrVu39nzcokWLJv2W5sF2rFXn26xZs4Cf7+Xi4uI0ceJETZw4UZJUXFys5cuX69VXX9Xhw4f17rvvqnfv3nrmmWccnikCHXkK+MiOHTskSf/4j//oNTwk1frOlb7Qq1cvzwmIn376qV+vy2nBdqydO3f2PG0XCPNt7B9E7NGj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gXNcxvD6QwAAYA/nfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAByxijLl266IEHHrhiXVFRkaKjozVt2jQHZgagMXh7dQABbe7cuXruuef05Zdfev60enl5ufr166fExER9+OGHCgnh/1FAMOEnFkBAGzdunMLDw/XWW295lj322GMqLy/Xe++9R3gAQYifWgABLT4+XmPGjFF2drYqKyv16quvaunSpVq8eLESEhKcnh6ABiA+AAS8p556Svv379f06dP17LPPas6cOUpLS3N6WgAaiHM+AASFQYMG6c9//rNGjRql9957z+npAGgEHvkAEBTS09MVFham119/3empAGgk4gNAUNi1a5e6du2q6Ohop6cCoJGIDwBBYceOHUpJSXF6GgB8gPgAEPCMMSoqKiI+gCaC+AAQ8L788kuVlZURH0ATQXwACHg7duyQJOIDaCJ4qS0AALCKRz4AAIBVxAcAALCK+AAAAFaFOT0BAPDG5XLVeSynrwHBg0c+AAQsY4yMMcrJyVFoaKj69eunY8eOeZZXvQAIHsQHgICXnp6u1157TZs2bdKSJUucng6ARiI+AAS866+/Xj/84Q/VuXNnFRYWOj0dAI1EfAAIGl26dFFRUZHT0wDQSJxwCiAofP7558rNzVXr1q2dngqARuKRDwBB4Uc/+pGaN2+uI0eO6NSpU05PB0AjEB8AAt7ixYv1ySefKDs7W9Lf/9YLgOBEfAAIaGfOnNFPfvITTZkyRcOGDVNISAjnfQBBjnM+AAS0n//854qMjNSUKVMUERGhm266ifgAghzxASBg7dy5U3PnztXKlSsVEREhSUpJSeFpFyDI8bQLgID11FNPKTMzU+np6Z5lKSkpPPIBBDke+QAQkBYuXKhNmzapuLi42vKUlBQdOnRIp0+fVlxcnEOzA9AYLsMfRQAAABbxtAsAALCK+AAAAFYRHwAAwCriAwAAWEV8AAAAq4gPAABgFfEBAACsIj4AAIBVxAcAALCK+AAAAFYRHwAAwCriAwAAWEV8AAAAq/4/GYoN8I+IMsAAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create an antenna panel using default antenna element template.\n",
    "txAntenna = AntennaPanel([1,2], polarization=\"x\")\n",
    "txAntenna.showElements(zeroTicks=True)\n",
    "txAntenna.shape, txAntenna.getNumElements()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f4a59c36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "CDL-D Channel Properties:\n",
      "  delaySpread: 10 ns\n",
      "  dopplerShift: 10 Hz\n",
      "  carrierFreq: 4000000000.0 Hz\n",
      "  normalizeGains: True\n",
      "  normalizeOutput: True\n",
      "  txDir: Downlink\n",
      "  timing method: linear\n",
      "  coherenceTime: 0.042314 (Sec.)\n",
      "  ueDirAZ: 0°, 90°\n",
      "  pathDelays (ns): 0.0000 0.0000 0.3500 6.1200 13.630 14.050 18.040 25.960 17.750 40.420\n",
      "                   79.370 94.240 97.080 125.25\n",
      "  pathPowers (db): -0.200 -13.50 -18.80 -21.00 -22.80 -17.90 -20.10 -21.90 -22.90 -27.80\n",
      "                   -23.60 -24.80 -30.00 -27.70\n",
      "  AODs (Degree):    0    0   89   89   89   13   13   13   35  -64  -33   53 -132   77\n",
      "  AOAs (Degree): -180 -180   89   89   89  163  163  163 -137   74  128 -120   -9  -84\n",
      "  ZODs (Degree):   98   98   86   86   86   98   98   98   98   88   91  104   80   86\n",
      "  ZOAs (Degree):   82   82   87   87   87   79   79   79   78   74   78   87   71   73\n",
      "  hasLOS: True\n",
      "  Cross Pol. Power: 11 db\n",
      "  angleSpreads: 5° 8° 3° 3°\n",
      "  TX Antenna:\n",
      "    Total Elements: 4\n",
      "    spacing: 0.5𝜆, 0.5𝜆\n",
      "    shape: 1 rows x 2 columns\n",
      "    polarization: x\n",
      "    taper: 1.0\n",
      "  RX Antenna:\n",
      "    Total Elements: 4\n",
      "    spacing: 0.5𝜆, 0.5𝜆\n",
      "    shape: 1 rows x 2 columns\n",
      "    polarization: +\n",
      "    taper: 1.0\n",
      "  Channel Filter:\n",
      "    filterDelay (samples): 7\n",
      "    numTxAntenna: 4\n",
      "    numPaths: 14\n",
      "    pathDelays (ns): 0.0000 0.0000 0.3500 6.1200 13.630 14.050 18.040 25.960 17.750 40.420\n",
      "                     79.370 94.240 97.080 125.25\n",
      "    filterLen: 16\n",
      "    numInterpol: 50\n",
      "    normalize: True\n",
      "    stopBandAtten: 80\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create a CDL-C channel model with 300ns delay spread, 4GHz carrier frequency, and 5Hz doppler shift\n",
    "channel = CdlChannel('D', delaySpread=10, carrierFreq=4e9, dopplerShift=10,\n",
    "                     txAntenna = txAntenna,\n",
    "                     rxAntenna = AntennaPanel([1,2], polarization=\"+\"),       # 4 RX antenna\n",
    "                     timing=\"linear\") # Nearest Neighbors interpolation (Also try: \"Polar\", \"linear\")\n",
    "print(channel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "332078bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "hActual = channel.getChannelMatrix(bwp, numSlots=1, timeDomain=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "651d4527",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Waveform Shape: (4, 16384)\n"
     ]
    }
   ],
   "source": [
    "waveForm = grid.ofdmModulate()\n",
    "print(\"Waveform Shape:\", waveForm.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4d21a8bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Channel Delay (Samples): 11\n",
      "txWaveform Shape: (4, 16395)\n",
      "rxWaveform Shape: (4, 16395)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(4, 16395)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxDelay = channel.getMaxDelay()\n",
    "print(\"Max. Channel Delay (Samples):\",maxDelay)\n",
    "# Append to the waveForm before passing it through the channel\n",
    "txWaveform = waveForm.pad(maxDelay)\n",
    "print(\"txWaveform Shape:\", txWaveform.shape)\n",
    "\n",
    "# Now apply the channel to the waveform\n",
    "rxWaveform = channel.applyToSignal(txWaveform)\n",
    "print(\"rxWaveform Shape:\", txWaveform.shape)\n",
    "\n",
    "# Add noise: (SNR=10 dB)\n",
    "noisyWaveForm = rxWaveform.addNoise(snrDb=50, nFFT=bwp.nFFT)\n",
    "noisyWaveForm.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "681878a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Channel Offset from the Channel Model: 7\n",
      "Estimated Offset: 7\n"
     ]
    }
   ],
   "source": [
    "# We can get channel delay from the channel (This is cheating because we don't know the channel)\n",
    "chOffset = channel.getTimingOffset(txWaveform.shape[1])\n",
    "print(\"Channel Offset from the Channel Model:\", chOffset)\n",
    "\n",
    "# Or estimate the offset using a resource grid with NZP CSI-RS and the recived signal\n",
    "# Only use NZP resources:\n",
    "rxCsiRsConfig = CsiRsConfig([csiRsSet for csiRsSet in csiRsConfig.csiRsSetList if csiRsSet.csiType==\"NZP\"])\n",
    "\n",
    "csiRsGrid = bwp.createGrid(rxCsiRsConfig.numPorts)\n",
    "rxCsiRsConfig.populateGrid(csiRsGrid)\n",
    "offset = csiRsGrid.estimateTimingOffset(noisyWaveForm)\n",
    "print(\"Estimated Offset:\", offset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8726d09d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "syncedWaveForm Shape: (4, 16388)\n"
     ]
    }
   ],
   "source": [
    "# Now apply the offset to the received waveform\n",
    "syncedWaveForm = noisyWaveForm.sync(offset)\n",
    "print(\"syncedWaveForm Shape:\", syncedWaveForm.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c45ceca6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 14, 624)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rxGrid = Grid.ofdmDemodulate(bwp, syncedWaveForm)\n",
    "rxGrid.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f7dd0d13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((14, 624, 4, 4), (14, 624, 4, 4))"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Least Squares Channel Estimation\n",
    "hEst, _ = rxGrid.estimateChannelLS(rxCsiRsConfig,kernel=\"linear\") \n",
    "hEst.shape, hActual.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "adb0fd25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Min Absolute Error: 4.152077454384459e-06\n",
      "Max Absolute Error: 0.004140206755751211\n",
      "Mean Absolute Error: 0.0012053535933496415\n",
      "MSE: 1.8658583014719393e-06\n",
      "Actual Channel:\n",
      " [0.06177877-0.00491705j 0.06175917-0.00506486j 0.06173923-0.00521265j\n",
      " 0.06171894-0.0053604j  0.0616983 -0.00550813j 0.06167732-0.00565583j\n",
      " 0.061656  -0.00580349j 0.06163403-0.00595314j 0.06161201-0.00610074j\n",
      " 0.06158965-0.00624831j 0.06156694-0.00639584j 0.06154389-0.00654333j\n",
      " 0.06152049-0.00669079j 0.06149675-0.00683821j]\n",
      "Estimated Channel:\n",
      " [0.06072263-0.00625106j 0.06072263-0.00625106j 0.06072263-0.00625106j\n",
      " 0.06072263-0.00625106j 0.06072263-0.00625106j 0.06072263-0.00625106j\n",
      " 0.06072263-0.00625106j 0.06072263-0.00625106j 0.06072263-0.00625106j\n",
      " 0.06072263-0.00625106j 0.06072263-0.00625106j 0.06072263-0.00625106j\n",
      " 0.06072263-0.00625106j 0.06072263-0.00625106j]\n"
     ]
    }
   ],
   "source": [
    "print(\"Min Absolute Error:\", np.abs(hActual-hEst).min())\n",
    "print(\"Max Absolute Error:\", np.abs(hActual-hEst).max())\n",
    "print(\"Mean Absolute Error:\", np.abs(hActual-hEst).mean())\n",
    "print(\"MSE:\", np.square(np.abs(hActual-hEst)).mean())\n",
    "\n",
    "# Print symbol values for the first subcarrier for the first pair of antennas\n",
    "print(\"Actual Channel:\\n\", hActual[:,0,0,0])\n",
    "print(\"Estimated Channel:\\n\", hEst[:,0,0,0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "843d0bc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0]),\n",
       " array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0]),\n",
       " array([  0,   1,   4,   5,   8,   9,  12,  13,  16,  17,  20,  21,  24,\n",
       "         25,  28,  29,  32,  33,  36,  37,  40,  41,  44,  45,  48,  49,\n",
       "         52,  53,  56,  57,  60,  61,  64,  65,  68,  69,  72,  73,  76,\n",
       "         77,  80,  81,  84,  85,  88,  89,  92,  93,  96,  97, 100, 101,\n",
       "        104, 105, 108, 109, 112, 113, 116, 117, 120, 121, 124, 125, 128,\n",
       "        129, 132, 133, 136, 137, 140, 141, 144, 145, 148, 149, 152, 153,\n",
       "        156, 157, 160, 161, 164, 165, 168, 169, 172, 173, 176, 177, 180,\n",
       "        181, 184, 185, 188, 189, 192, 193, 196, 197, 200, 201, 204, 205,\n",
       "        208, 209, 212, 213, 216, 217, 220, 221, 224, 225, 228, 229, 232,\n",
       "        233, 236, 237, 240, 241, 244, 245, 248, 249, 252, 253, 256, 257,\n",
       "        260, 261, 264, 265, 268, 269, 272, 273, 276, 277, 280, 281, 284,\n",
       "        285, 288, 289, 292, 293, 296, 297, 300, 301, 304, 305, 308, 309,\n",
       "        312, 313, 316, 317, 320, 321, 324, 325, 328, 329, 332, 333, 336,\n",
       "        337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361,\n",
       "        364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388,\n",
       "        389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413,\n",
       "        416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440,\n",
       "        441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465,\n",
       "        468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492,\n",
       "        493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517,\n",
       "        520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544,\n",
       "        545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569,\n",
       "        572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596,\n",
       "        597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621]))"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxes = grid.getReIndexes(\"CSIRS_NZP\")\n",
    "p1Idxes = np.where(idxes[0]==0)[0]\n",
    "idxes = (idxes[0][p1Idxes], idxes[1][p1Idxes], idxes[2][p1Idxes]) # indexes in 1st port\n",
    "idxes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bd3d48e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "784c1acd",
   "metadata": {},
   "outputs": [],
   "source": [
    "csiReport = CsiReport(bwp=bwp, csiRsConfig=rxCsiRsConfig, codebookType=\"Type1SP\", \n",
    "                      codebookMode=1, txAntenna=txAntenna)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "151ac4cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0]),\n",
       " array([  0,   1,   4,   5,   8,   9,  12,  13,  16,  17,  20,  21,  24,\n",
       "         25,  28,  29,  32,  33,  36,  37,  40,  41,  44,  45,  48,  49,\n",
       "         52,  53,  56,  57,  60,  61,  64,  65,  68,  69,  72,  73,  76,\n",
       "         77,  80,  81,  84,  85,  88,  89,  92,  93,  96,  97, 100, 101,\n",
       "        104, 105, 108, 109, 112, 113, 116, 117, 120, 121, 124, 125, 128,\n",
       "        129, 132, 133, 136, 137, 140, 141, 144, 145, 148, 149, 152, 153,\n",
       "        156, 157, 160, 161, 164, 165, 168, 169, 172, 173, 176, 177, 180,\n",
       "        181, 184, 185, 188, 189, 192, 193, 196, 197, 200, 201, 204, 205,\n",
       "        208, 209, 212, 213, 216, 217, 220, 221, 224, 225, 228, 229, 232,\n",
       "        233, 236, 237, 240, 241, 244, 245, 248, 249, 252, 253, 256, 257,\n",
       "        260, 261, 264, 265, 268, 269, 272, 273, 276, 277, 280, 281, 284,\n",
       "        285, 288, 289, 292, 293, 296, 297, 300, 301, 304, 305, 308, 309,\n",
       "        312, 313, 316, 317, 320, 321, 324, 325, 328, 329, 332, 333, 336,\n",
       "        337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361,\n",
       "        364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388,\n",
       "        389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413,\n",
       "        416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440,\n",
       "        441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465,\n",
       "        468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492,\n",
       "        493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517,\n",
       "        520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544,\n",
       "        545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569,\n",
       "        572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596,\n",
       "        597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621]))"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "self = csiReport\n",
    "\n",
    "def removeNeighbors(idx):\n",
    "    # idx is the 2D indexes (port removed). It is a tuple (x, y).\n",
    "    # We have a CSI-RS RE at symbol x[i], and subcarrier y[i].\n",
    "    # We want to use only one RE for a set of Neighboring REs (i.e. the ones in the same CDM group)\n",
    "    bmp = np.ones((idx[0].max()+3,idx[1].max()+3),dtype=np.int8)*2\n",
    "    bmp[(idx[0]+1,idx[1]+1)] = 1\n",
    "    x,y = np.where(bmp[:,1:]-bmp[:,:-1]!=-1)\n",
    "    bmp[ (x,y+1) ] = 2\n",
    "    x,y = np.where(bmp[1:,:]-bmp[:-1,:]!=-1)\n",
    "    bmp[ (x+1,y) ] = 2\n",
    "    x,y = np.where(bmp==1)\n",
    "    return (x-1,y-1)\n",
    "\n",
    "csiRsGrid = self.bwp.createGrid(self.numPorts)\n",
    "self.csiRsConfig.populateGrid(csiRsGrid)\n",
    "csiRsIndexes = grid.getReIndexes(\"CSIRS_NZP\")   # A tuple of (ports, symbols, subcarriers)\n",
    "p0Idx = np.where(csiRsIndexes[0]==0)[0]         # Indexes in the csiRsIndexes corresponding to port 0\n",
    "csiRsIndexesP0 = (idxes[1][p1Idxes], idxes[2][p1Idxes])     # A tuple of (symbols, subcarriers) corresponding to port 0\n",
    "csiRsIndexesP0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "23b1c5d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0]),\n",
       " array([  0,   4,   8,  12,  16,  20,  24,  28,  32,  36,  40,  44,  48,\n",
       "         52,  56,  60,  64,  68,  72,  76,  80,  84,  88,  92,  96, 100,\n",
       "        104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152,\n",
       "        156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204,\n",
       "        208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256,\n",
       "        260, 264, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308,\n",
       "        312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360,\n",
       "        364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412,\n",
       "        416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464,\n",
       "        468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516,\n",
       "        520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568,\n",
       "        572, 576, 580, 584, 588, 592, 596, 600, 604, 608, 612, 616, 620]))"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csiRsIndexesP0 = removeNeighbors(csiRsIndexesP0)\n",
    "csiRsIndexesP0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3a94f398",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(156, 4, 4)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hAtCsiRs = hActual[csiRsIndexesP0]\n",
    "hAtCsiRs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "32f2a136",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0]),\n",
       " array([  0,   4,   8,  12,  16,  20,  24,  28,  32,  36,  40,  44,  48,\n",
       "         52,  56,  60,  64,  68,  72,  76,  80,  84,  88,  92,  96, 100,\n",
       "        104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152,\n",
       "        156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204,\n",
       "        208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256,\n",
       "        260, 264, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308,\n",
       "        312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360,\n",
       "        364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412,\n",
       "        416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464,\n",
       "        468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516,\n",
       "        520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568,\n",
       "        572, 576, 580, 584, 588, 592, 596, 600, 604, 608, 612, 616, 620]))"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csiRsIndexesP0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "84a1c16f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx = np.where((csiRsIndexesP0[1]<96)&(csiRsIndexesP0[1]>48))[0]\n",
    "idx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b0590607",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n",
       " array([52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92]))"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(csiRsIndexesP0[0][idx], csiRsIndexesP0[1][idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "353d1cbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((64, 4, 1), 64)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indexes, codebook = csiReport.getCodebook(numLayers=1)\n",
    "codebook.shape, len(indexes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "48d16e6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[[0, 0], 0],\n",
       " [[0, 0], 1],\n",
       " [[0, 0], 2],\n",
       " [[0, 0], 3],\n",
       " [[0, 0], 4],\n",
       " [[0, 0], 5],\n",
       " [[0, 0], 6],\n",
       " [[0, 0], 7],\n",
       " [[0, 0], 8],\n",
       " [[0, 0], 9],\n",
       " [[0, 0], 10],\n",
       " [[0, 0], 11],\n",
       " [[0, 0], 12],\n",
       " [[0, 0], 13],\n",
       " [[0, 0], 14],\n",
       " [[0, 0], 15],\n",
       " [[1, 0], 0],\n",
       " [[1, 0], 1],\n",
       " [[1, 0], 2],\n",
       " [[1, 0], 3],\n",
       " [[1, 0], 4],\n",
       " [[1, 0], 5],\n",
       " [[1, 0], 6],\n",
       " [[1, 0], 7],\n",
       " [[1, 0], 8],\n",
       " [[1, 0], 9],\n",
       " [[1, 0], 10],\n",
       " [[1, 0], 11],\n",
       " [[1, 0], 12],\n",
       " [[1, 0], 13],\n",
       " [[1, 0], 14],\n",
       " [[1, 0], 15],\n",
       " [[2, 0], 0],\n",
       " [[2, 0], 1],\n",
       " [[2, 0], 2],\n",
       " [[2, 0], 3],\n",
       " [[2, 0], 4],\n",
       " [[2, 0], 5],\n",
       " [[2, 0], 6],\n",
       " [[2, 0], 7],\n",
       " [[2, 0], 8],\n",
       " [[2, 0], 9],\n",
       " [[2, 0], 10],\n",
       " [[2, 0], 11],\n",
       " [[2, 0], 12],\n",
       " [[2, 0], 13],\n",
       " [[2, 0], 14],\n",
       " [[2, 0], 15],\n",
       " [[3, 0], 0],\n",
       " [[3, 0], 1],\n",
       " [[3, 0], 2],\n",
       " [[3, 0], 3],\n",
       " [[3, 0], 4],\n",
       " [[3, 0], 5],\n",
       " [[3, 0], 6],\n",
       " [[3, 0], 7],\n",
       " [[3, 0], 8],\n",
       " [[3, 0], 9],\n",
       " [[3, 0], 10],\n",
       " [[3, 0], 11],\n",
       " [[3, 0], 12],\n",
       " [[3, 0], 13],\n",
       " [[3, 0], 14],\n",
       " [[3, 0], 15]]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indexes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "86ffd8f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 1 \n",
      " [[0.5+0.j]\n",
      " [0.5+0.j]\n",
      " [0.5+0.j]\n",
      " [0.5+0.j]] \n",
      "\n",
      "2 1 \n",
      " [[0.5+0.j ]\n",
      " [0.5+0.j ]\n",
      " [0. +0.5j]\n",
      " [0. +0.5j]] \n",
      "\n",
      "3 1 \n",
      " [[ 0.5+0.j]\n",
      " [ 0.5+0.j]\n",
      " [-0.5+0.j]\n",
      " [-0.5+0.j]] \n",
      "\n",
      "4 1 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "5 1 \n",
      " [[0.5   +0.j    ]\n",
      " [0.3536+0.3536j]\n",
      " [0.5   +0.j    ]\n",
      " [0.3536+0.3536j]] \n",
      "\n",
      "6 1 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]\n",
      " [ 0.    +0.5j   ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "7 1 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "8 1 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [ 0.3536-0.3536j]] \n",
      "\n",
      "9 1 \n",
      " [[0.5+0.j ]\n",
      " [0. +0.5j]\n",
      " [0.5+0.j ]\n",
      " [0. +0.5j]] \n",
      "\n",
      "10 1 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [ 0. +0.5j]\n",
      " [-0.5+0.j ]] \n",
      "\n",
      "11 1 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [-0.5+0.j ]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "12 1 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [-0. -0.5j]\n",
      " [ 0.5-0.j ]] \n",
      "\n",
      "13 1 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "14 1 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [ 0.    +0.5j   ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "15 1 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [ 0.3536-0.3536j]] \n",
      "\n",
      "16 1 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [ 0.3536+0.3536j]] \n",
      "\n",
      "1 2 \n",
      " [[0.5+0.j ]\n",
      " [0. +0.5j]\n",
      " [0.5+0.j ]\n",
      " [0. +0.5j]] \n",
      "\n",
      "2 2 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [ 0. +0.5j]\n",
      " [-0.5+0.j ]] \n",
      "\n",
      "3 2 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [-0.5+0.j ]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "4 2 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [-0. -0.5j]\n",
      " [ 0.5-0.j ]] \n",
      "\n",
      "5 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "6 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [ 0.    +0.5j   ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "7 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [ 0.3536-0.3536j]] \n",
      "\n",
      "8 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [ 0.3536+0.3536j]] \n",
      "\n",
      "9 2 \n",
      " [[ 0.5+0.j]\n",
      " [-0.5+0.j]\n",
      " [ 0.5+0.j]\n",
      " [-0.5+0.j]] \n",
      "\n",
      "10 2 \n",
      " [[ 0.5+0.j ]\n",
      " [-0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "11 2 \n",
      " [[ 0.5+0.j]\n",
      " [-0.5+0.j]\n",
      " [-0.5+0.j]\n",
      " [ 0.5-0.j]] \n",
      "\n",
      "12 2 \n",
      " [[ 0.5+0.j ]\n",
      " [-0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [ 0. +0.5j]] \n",
      "\n",
      "13 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "14 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [ 0.    +0.5j   ]\n",
      " [ 0.3536-0.3536j]] \n",
      "\n",
      "15 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]] \n",
      "\n",
      "16 2 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "1 3 \n",
      " [[ 0.5+0.j]\n",
      " [-0.5+0.j]\n",
      " [ 0.5+0.j]\n",
      " [-0.5+0.j]] \n",
      "\n",
      "2 3 \n",
      " [[ 0.5+0.j ]\n",
      " [-0.5+0.j ]\n",
      " [ 0. +0.5j]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "3 3 \n",
      " [[ 0.5+0.j]\n",
      " [-0.5+0.j]\n",
      " [-0.5+0.j]\n",
      " [ 0.5-0.j]] \n",
      "\n",
      "4 3 \n",
      " [[ 0.5+0.j ]\n",
      " [-0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [ 0. +0.5j]] \n",
      "\n",
      "5 3 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "6 3 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [ 0.    +0.5j   ]\n",
      " [ 0.3536-0.3536j]] \n",
      "\n",
      "7 3 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]] \n",
      "\n",
      "8 3 \n",
      " [[ 0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "9 3 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [ 0.5+0.j ]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "10 3 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [ 0. +0.5j]\n",
      " [ 0.5-0.j ]] \n",
      "\n",
      "11 3 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [-0.5+0.j ]\n",
      " [ 0. +0.5j]] \n",
      "\n",
      "12 3 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [-0. -0.5j]\n",
      " [-0.5+0.j ]] \n",
      "\n",
      "13 3 \n",
      " [[0.5   +0.j    ]\n",
      " [0.3536-0.3536j]\n",
      " [0.5   +0.j    ]\n",
      " [0.3536-0.3536j]] \n",
      "\n",
      "14 3 \n",
      " [[0.5   +0.j    ]\n",
      " [0.3536-0.3536j]\n",
      " [0.    +0.5j   ]\n",
      " [0.3536+0.3536j]] \n",
      "\n",
      "15 3 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536-0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "16 3 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536-0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "1 4 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [ 0.5+0.j ]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "2 4 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [ 0. +0.5j]\n",
      " [ 0.5-0.j ]] \n",
      "\n",
      "3 4 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [-0.5+0.j ]\n",
      " [ 0. +0.5j]] \n",
      "\n",
      "4 4 \n",
      " [[ 0.5+0.j ]\n",
      " [-0. -0.5j]\n",
      " [-0. -0.5j]\n",
      " [-0.5+0.j ]] \n",
      "\n",
      "5 4 \n",
      " [[0.5   +0.j    ]\n",
      " [0.3536-0.3536j]\n",
      " [0.5   +0.j    ]\n",
      " [0.3536-0.3536j]] \n",
      "\n",
      "6 4 \n",
      " [[0.5   +0.j    ]\n",
      " [0.3536-0.3536j]\n",
      " [0.    +0.5j   ]\n",
      " [0.3536+0.3536j]] \n",
      "\n",
      "7 4 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536-0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "8 4 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536-0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "9 4 \n",
      " [[0.5+0.j]\n",
      " [0.5-0.j]\n",
      " [0.5+0.j]\n",
      " [0.5-0.j]] \n",
      "\n",
      "10 4 \n",
      " [[0.5+0.j ]\n",
      " [0.5-0.j ]\n",
      " [0. +0.5j]\n",
      " [0. +0.5j]] \n",
      "\n",
      "11 4 \n",
      " [[ 0.5+0.j]\n",
      " [ 0.5-0.j]\n",
      " [-0.5+0.j]\n",
      " [-0.5+0.j]] \n",
      "\n",
      "12 4 \n",
      " [[ 0.5+0.j ]\n",
      " [ 0.5-0.j ]\n",
      " [-0. -0.5j]\n",
      " [-0. -0.5j]] \n",
      "\n",
      "13 4 \n",
      " [[0.5   +0.j    ]\n",
      " [0.3536+0.3536j]\n",
      " [0.5   +0.j    ]\n",
      " [0.3536+0.3536j]] \n",
      "\n",
      "14 4 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]\n",
      " [ 0.    +0.5j   ]\n",
      " [-0.3536+0.3536j]] \n",
      "\n",
      "15 4 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]\n",
      " [-0.5   +0.j    ]\n",
      " [-0.3536-0.3536j]] \n",
      "\n",
      "16 4 \n",
      " [[ 0.5   +0.j    ]\n",
      " [ 0.3536+0.3536j]\n",
      " [-0.    -0.5j   ]\n",
      " [ 0.3536-0.3536j]] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(indexes)):\n",
    "    print(indexes[i][1]+1, indexes[i][0][0]+1, \"\\n\", np.round(codebook[i],4), \"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f1c959a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type1SP codebookMode: 1 numLayers: 1\n",
      "32 indexes, codebook Shape: (32, 4, 1)\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'CsiReport' object has no attribute 'numLayers'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[20], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m numLayers \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m4\u001b[39m]:\n\u001b[1;32m      4\u001b[0m     csiReport \u001b[38;5;241m=\u001b[39m CsiReport(bwp\u001b[38;5;241m=\u001b[39mbwp, codebookType\u001b[38;5;241m=\u001b[39mcodebookType, codebookMode\u001b[38;5;241m=\u001b[39mcodebookMode, txAntenna\u001b[38;5;241m=\u001b[39mtxAntenna)\n\u001b[0;32m----> 5\u001b[0m     indexes, codebook \u001b[38;5;241m=\u001b[39m \u001b[43mcsiReport\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetCodebook\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnumLayers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnumLayers\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m     \u001b[38;5;28mprint\u001b[39m(codebookType, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcodebookMode:\u001b[39m\u001b[38;5;124m\"\u001b[39m, codebookMode, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnumLayers:\u001b[39m\u001b[38;5;124m\"\u001b[39m, numLayers)\n\u001b[1;32m      7\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mlen\u001b[39m(indexes), \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mindexes, codebook Shape:\u001b[39m\u001b[38;5;124m\"\u001b[39m, codebook\u001b[38;5;241m.\u001b[39mshape)\n",
      "File \u001b[0;32m~/code/Fireball/OpenSource/onGithub/Tests/Wireless/NewProject/OnGit/neoradium/neoradium/csifeedback.py:219\u001b[0m, in \u001b[0;36mCsiReport.getCodebook\u001b[0;34m(self, numLayers)\u001b[0m\n\u001b[1;32m    217\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i1,i2 \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtype1SpIndexes(numLayers):\n\u001b[1;32m    218\u001b[0m         indexes \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m [ [i1,i2] ]\n\u001b[0;32m--> 219\u001b[0m         codebook \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m [ \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetType1SpPrecoder\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnumLayers\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mi1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mi2\u001b[49m\u001b[43m)\u001b[49m ]\n\u001b[1;32m    220\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m indexes, np\u001b[38;5;241m.\u001b[39marray(codebook)\n\u001b[1;32m    222\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcodebookType \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mType1MP\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "File \u001b[0;32m~/code/Fireball/OpenSource/onGithub/Tests/Wireless/NewProject/OnGit/neoradium/neoradium/csifeedback.py:415\u001b[0m, in \u001b[0;36mCsiReport.getType1SpPrecoder\u001b[0;34m(self, numLayers, i1, i2)\u001b[0m\n\u001b[1;32m    412\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39mconcatenate([vlm, phi\u001b[38;5;241m*\u001b[39mvlm])\u001b[38;5;241m/\u001b[39mnp\u001b[38;5;241m.\u001b[39msqrt(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnumPorts)\n\u001b[1;32m    414\u001b[0m \u001b[38;5;66;03m# ----------------------------------------------------------------------------------------------------------------------------------------\u001b[39;00m\n\u001b[0;32m--> 415\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnumLayers\u001b[49m \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m:\n\u001b[1;32m    416\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m ( (\u001b[38;5;28mtype\u001b[39m(i1) \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;28mtuple\u001b[39m, \u001b[38;5;28mlist\u001b[39m]) \u001b[38;5;129;01mand\u001b[39;00m (\u001b[38;5;28mlen\u001b[39m(i1)\u001b[38;5;241m==\u001b[39m\u001b[38;5;241m3\u001b[39m) ):    \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m( \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mi1\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m must be a tuple or list of length three!\u001b[39m\u001b[38;5;124m\"\u001b[39m )\n\u001b[1;32m    417\u001b[0m     i11,i12,i13 \u001b[38;5;241m=\u001b[39m i1\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'CsiReport' object has no attribute 'numLayers'"
     ]
    }
   ],
   "source": [
    "for codebookType in [\"Type1SP\"]:\n",
    "    for codebookMode in [1,2]:\n",
    "        for numLayers in [1,2,3,4]:\n",
    "            csiReport = CsiReport(bwp=bwp, codebookType=codebookType, codebookMode=codebookMode, txAntenna=txAntenna)\n",
    "            indexes, codebook = csiReport.getCodebook(numLayers=numLayers)\n",
    "            print(codebookType, \"codebookMode:\", codebookMode, \"numLayers:\", numLayers)\n",
    "            print(len(indexes), \"indexes, codebook Shape:\", codebook.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "49713e87",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'numRbs'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[19], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m csiReport \u001b[38;5;241m=\u001b[39m \u001b[43mCsiReport\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcodebookType\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mType1SP\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcodebookMode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn1\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn2\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/code/Fireball/OpenSource/onGithub/Tests/Wireless/NewProject/OnGit/neoradium/neoradium/csifeedback.py:181\u001b[0m, in \u001b[0;36mCsiReport.__init__\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    179\u001b[0m \u001b[38;5;66;03m# subbandSize: See 3GPP TS 38.214, Table 5.2.1.4-2\u001b[39;00m\n\u001b[1;32m    180\u001b[0m subbandSizeValues \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m--> 181\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbwp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnumRbs\u001b[49m\u001b[38;5;241m<\u001b[39m\u001b[38;5;241m24\u001b[39m:      subbandSizeValues \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m0\u001b[39m]      \u001b[38;5;66;03m# No subbands if BWP size is less than 24\u001b[39;00m\n\u001b[1;32m    182\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbwp\u001b[38;5;241m.\u001b[39mnumRbs\u001b[38;5;241m<\u001b[39m\u001b[38;5;241m73\u001b[39m:    subbandSizeValues \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m4\u001b[39m, \u001b[38;5;241m8\u001b[39m]\n\u001b[1;32m    183\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbwp\u001b[38;5;241m.\u001b[39mnumRbs\u001b[38;5;241m<\u001b[39m\u001b[38;5;241m145\u001b[39m:   subbandSizeValues \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m8\u001b[39m, \u001b[38;5;241m16\u001b[39m]\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'numRbs'"
     ]
    }
   ],
   "source": [
    "csiReport = CsiReport(codebookType=\"Type1SP\", codebookMode=1, n1=1, n2=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b7b7a682",
   "metadata": {},
   "outputs": [],
   "source": [
    "cb = csiReport.getType1SpPrecoder(numLayers=1, i1=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "42f3fd5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2, 1),\n",
       " array([[0.7071+0.j],\n",
       "        [0.7071+0.j]]))"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cb.shape, np.round(cb,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5914bcfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.5+0.j],\n",
       "       [0.5+0.j],\n",
       "       [0.5+0.j],\n",
       "       [0.5+0.j]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.concatenate([csiReport.v(0,0), csiReport.v(0,0)])/np.sqrt(csiReport.numPorts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc97c712",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
