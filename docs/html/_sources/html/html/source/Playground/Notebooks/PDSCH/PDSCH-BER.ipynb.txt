{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3767d8fa",
   "metadata": {},
   "source": [
    "## Calculating bit error rate of PDSCH communication\n",
    "This notebook shows how to calculate the bit error rate of PDSCH communication when there is no channel coding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2415601e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.io\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from neoradium import Carrier, PDSCH, CdlChannel, AntennaPanel, Grid\n",
    "from neoradium.utils import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "64a5cf3a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Simulating end-to-end for \"16QAM\", with \"Perfect\" channel estimation, in time domain.\n",
      "SNR(dB)   Total Bits   Bit Errors   BER(%)   time(Sec.)\n",
      "-------   ----------   ----------   ------   ----------\n",
      "    5       2545920       758389     29.79      5.71\n",
      "   10       2545920       478555     18.80      5.77\n",
      "   15       2545920       208018      8.17      5.82\n",
      "   20       2545920        42283      1.66      5.81\n",
      "   25       2545920         2789      0.11      5.78\n",
      "   30       2545920           27      0.00      5.81\n",
      "\n",
      "Simulating end-to-end for \"16QAM\", with \"LS\" channel estimation, in time domain.\n",
      "SNR(dB)   Total Bits   Bit Errors   BER(%)   time(Sec.)\n",
      "-------   ----------   ----------   ------   ----------\n",
      "    5       2545920       884330     34.74      6.27\n",
      "   10       2545920       588715     23.12      6.13\n",
      "   15       2545920       300615     11.81      6.10\n",
      "   20       2545920        91421      3.59      6.01\n",
      "   25       2545920        11869      0.47      6.44\n",
      "   30       2545920          708      0.03      6.01\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "numFrames = 2                               # Number of time-domain frames\n",
    "snrDbs = [5,10,15,20,25,30]                 # SNR values (in dB) for which we want to evaluate the model\n",
    "freqDomain = False                          # Set this to True to apply channel in frequency domain\n",
    "\n",
    "modulation = \"16QAM\"                        # Modulation Scheme\n",
    "carrier = Carrier(numRbs=51, spacing=30)    # Create a carrier with 51 RBs and 30KHz subcarrier spacing\n",
    "bwp = carrier.curBwp                        # The only bandwidth part in the carrier\n",
    "\n",
    "# Create a PDSCH object\n",
    "pdsch = PDSCH(bwp, interleavingBundleSize=0, numLayers=2, nID=carrier.cellId, modulation=modulation)\n",
    "pdsch.setDMRS(prgSize=0, configType=2, additionalPos=2)     # Specify the DMRS configuration\n",
    "\n",
    "numSlots = bwp.slotsPerFrame*numFrames                      # Total number of slots\n",
    "results = {}                                                # Dictionary to save the results\n",
    "\n",
    "minMse, maxMse = 100, 0\n",
    "for chanEstMethod in [\"Perfect\", \"LS\"]:               # Two different channel estimation methods\n",
    "    results[chanEstMethod] = {}\n",
    "    print(\"\\nSimulating end-to-end for \\\"%s\\\", with \\\"%s\\\" channel estimation, in %s domain.\"%\n",
    "          (modulation, chanEstMethod, \"frequency\" if freqDomain else \"time\"))\n",
    "    print(\"SNR(dB)   Total Bits   Bit Errors   BER(%)   time(Sec.)\")\n",
    "    print(\"-------   ----------   ----------   ------   ----------\")\n",
    "    for snrDb in snrDbs:\n",
    "        random.setSeed(123)                          # Making the results reproducible.\n",
    "        t0 = time.time()\n",
    "        carrier.slotNo = 0\n",
    "\n",
    "        # Creating a CdlChannel object:\n",
    "        channel = CdlChannel('C', delaySpread=300, carrierFreq=4e9, dopplerShift=5,\n",
    "                             txAntenna = AntennaPanel([2,4]),  # 8 TX antenna\n",
    "                             rxAntenna = AntennaPanel([1,2]),  # 2 RX antenna\n",
    "                             seed = 123,\n",
    "                             timing = \"nearest\")  \n",
    "\n",
    "        bitErrors = 0\n",
    "        totalBits = 0\n",
    "\n",
    "        for slotNo in range(numSlots):\n",
    "            grid = pdsch.getGrid()                       # Create a resource grid already populated with DMRS \n",
    "            numBits = pdsch.getBitSizes(grid)[0]         # Actual number of bits available in the resource grid\n",
    "            txBits = random.bits(numBits)                # Create random binary data\n",
    "\n",
    "            # Now populate the resource grid with coded data. This includes QAM modulation and resource mapping.\n",
    "            pdsch.populateGrid(grid, txBits)\n",
    "\n",
    "            # Store the indexes of the PDSCH data in pdschIndexes to be used later.\n",
    "            pdschIndexes = pdsch.getReIndexes(grid, \"PDSCH\")   \n",
    "\n",
    "            # Getting the Precoding Matrix, and precoding the resource grid\n",
    "            channelMatrix = channel.getChannelMatrix(bwp)           # Get the channel matrix\n",
    "            precoder = pdsch.getPrecodingMatrix(channelMatrix)      # Get the precoder matrix from PDSCH object\n",
    "            precodedGrid = grid.precode(precoder)                   # Perform the precoding\n",
    "\n",
    "            if freqDomain:\n",
    "                rxGrid = precodedGrid.applyChannel(channelMatrix)   # Apply the channel in frequency domain\n",
    "                rxGrid = rxGrid.addNoise(snrDb=snrDb)               # Add noise\n",
    "            else:\n",
    "                txWaveform = precodedGrid.ofdmModulate()            # OFDM Modulation\n",
    "                maxDelay = channel.getMaxDelay()                    # Get the max. channel delay\n",
    "                txWaveform = txWaveform.pad(maxDelay)               # Pad with zeros\n",
    "                rxWaveform = channel.applyToSignal(txWaveform)      # Apply channel in time domain\n",
    "                noisyRxWaveform = rxWaveform.addNoise(snrDb=snrDb, nFFT=bwp.nFFT)  # Add noise\n",
    "                offset = channel.getTimingOffset()                  # Get timing info for synchronization\n",
    "                syncedWaveform = noisyRxWaveform.sync(offset)       # Synchronization\n",
    "                rxGrid = syncedWaveform.ofdmDemodulate(bwp)         # OFDM demodulation\n",
    "\n",
    "            if chanEstMethod == \"Perfect\":                          # Perfect Channel Estimation\n",
    "                estChannelMatrix = channelMatrix @ precoder[None,...]\n",
    "            else:                                                   # LS + Interpolation Channel Estimation\n",
    "                estChannelMatrix, noiseEst = rxGrid.estimateChannelLS(pdsch.dmrs, polarInt=False, \n",
    "                                                                      kernel='linear')\n",
    "            act = channelMatrix @ precoder[None,...]\n",
    "            mse1 = np.square(np.abs(estChannelMatrix - act)).mean()\n",
    "            fEst = np.stack([estChannelMatrix.real, estChannelMatrix.imag], axis=4)\n",
    "            fAct = np.stack([act.real, act.imag], axis=4)\n",
    "            mse2 = np.square(fEst - fAct).mean()\n",
    "            if minMse>mse2: minMse=mse2\n",
    "            if maxMse<mse2: maxMse=mse2\n",
    "\n",
    "            eqGrid, llrScales = rxGrid.equalize(estChannelMatrix)       # Equalization\n",
    "            rxBits = pdsch.getHardBitsFromGrid(eqGrid, pdschIndexes)[0] # Demodulation\n",
    "            bitErrors += np.abs(rxBits-txBits).sum()                    # Calculating number of bit errors\n",
    "            totalBits += numBits\n",
    "            print(\"\\r  %3d      %8d     %8d    %6.2f    %6.2f\"%(snrDb, totalBits, bitErrors, \n",
    "                                                                bitErrors*100/totalBits, time.time()-t0), end='')\n",
    "\n",
    "            carrier.goNext()                        # Prepare the carrier object for the next slot\n",
    "            channel.goNext()                        # Prepare the channel model for the next slot\n",
    "\n",
    "        dt = time.time()-t0                         # Total time for this SNR\n",
    "        results[chanEstMethod][snrDb] = {\"totalBits\":totalBits, \n",
    "                                         \"bitErrors\":bitErrors, \n",
    "                                         \"BER\":      bitErrors*100/totalBits,\n",
    "                                         \"Time\":     dt}\n",
    "        print(\"\\r  %3d      %8d     %8d    %6.2f    %6.2f\"%(snrDb, totalBits, bitErrors, \n",
    "                                                            bitErrors*100/totalBits, dt))\n",
    "\n",
    "# Compare the results in a plot:\n",
    "for i,chanEstMethod in enumerate(['Perfect', 'LS']):\n",
    "    bers = [results[chanEstMethod][snrDb][\"BER\"] for snrDb in snrDbs]\n",
    "    plt.plot(snrDbs, bers, label=chanEstMethod)\n",
    "plt.legend()\n",
    "plt.title(\"Bit Error Rate for different mothods of Channel Estimation.\");\n",
    "plt.grid()\n",
    "plt.xlabel(\"SNR\")\n",
    "plt.xticks(snrDbs)\n",
    "plt.ylabel(\"BER (%)\")\n",
    "# plt.yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f699af0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
