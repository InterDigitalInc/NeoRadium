{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2415601e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of bit mismatches between the decoded transport block and original: 0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from neoradium import Carrier, PDSCH, CdlChannel, AntennaPanel, LdpcEncoder\n",
    "from neoradium.utils import random\n",
    "\n",
    "random.setSeed(123)                                        # Making the results reproducible.\n",
    "\n",
    "carrier = Carrier(numRbs=51, spacing=30)                   # Carrier with 51 resource block, 30KHz Spacing\n",
    "pdsch = PDSCH(carrier.curBwp, numLayers=2, nID=carrier.cellId)                   # PDSCH object with 2-Layers\n",
    "pdsch.setDMRS(configType=2, additionalPos=1)                                     # Configuring DMRS\n",
    "ldpcEncoder = LdpcEncoder(baseGraphNo=1, modulation=pdsch.modems[0].modulation,  # LDPC encoder\n",
    "                          txLayers=pdsch.numLayers, targetRate=490/1024)\n",
    "channel = CdlChannel('C', delaySpread=300, carrierFreq=4e9, dopplerShift=5,      # CDL-C, 300 ns, 4 GHz, 5 Hz\n",
    "                     txAntenna = AntennaPanel([2,4], polarization=\"x\"),          # 16 TX antenna\n",
    "                     rxAntenna = AntennaPanel([1,2], polarization=\"x\"))          # 4 RX antenna\n",
    "\n",
    "grid = pdsch.getGrid()                                     # Create a resource grid (pre-populated with DMRS) \n",
    "txBlockSize = pdsch.getTxBlockSize(ldpcEncoder.targetRate) # Get the Transport Block Size \n",
    "txBlock = random.bits(txBlockSize[0])                      # Create random binary data     \n",
    "numBits = pdsch.getBitSizes(grid)                          # Actual number of bits available in the grid\n",
    "codeBlocks = ldpcEncoder.getRateMatchedCodeWords(txBlock, numBits[0]) # Segmentation, rate-matching, encoding\n",
    "pdsch.populateGrid(grid, codeBlocks)                       # Populate the grid with modulated coded data\n",
    "\n",
    "channelMatrix = channel.getChannelMatrix(carrier.curBwp)   # Get the channel matrix\n",
    "precoder = pdsch.getPrecodingMatrix(channelMatrix)         # Get the precoder matrix from the PDSCH object\n",
    "precodedGrid = grid.precode(precoder)                      # Perform the precoding\n",
    "\n",
    "txWaveform = precodedGrid.ofdmModulate()                   # OFDM Modulation (txWaveform is in time domain)\n",
    "\n",
    "maxDelay = channel.getMaxDelay()                           # Get channel delay\n",
    "txWaveform = txWaveform.pad(maxDelay)                      # Pad zeros to the end of waveform\n",
    "\n",
    "rxWaveform = channel.applyToSignal(txWaveform)             # Apply channel to the transmitted signal\n",
    "noisyRxWaveform = rxWaveform.addNoise(snrDb=20, nFFT=carrier.curBwp.nFFT)     # Add noise to the waveform\n",
    "\n",
    "# Synchronization\n",
    "offset = channel.getTimingOffset()                   \n",
    "syncedWaveform = noisyRxWaveform.sync(offset)\n",
    "\n",
    "rxGrid = syncedWaveform.ofdmDemodulate(carrier.curBwp)                        # OFDM Demodulation\n",
    "estChannelMatrix, _ = rxGrid.estimateChannelLS(pdsch.dmrs)                    # Channel estimation\n",
    "eqGrid, llrScales = rxGrid.equalize(estChannelMatrix)                         # Equalization\n",
    "\n",
    "pdschIndexes = pdsch.getReIndexes(grid, \"PDSCH\")                              # Indexes of the PDSCH data\n",
    "llrs = pdsch.getLLRsFromGrid(eqGrid, pdschIndexes, llrScales)                 # Log-Likelihood Ratios\n",
    "\n",
    "ldpcDecoder = ldpcEncoder.getDecoder()                                        # Get an LDPC decoder\n",
    "rxCodedBlocks = ldpcDecoder.recoverRate(llrs[0], txBlockSize[0])              # Rate recovery\n",
    "decodedBlocks = ldpcDecoder.decode(rxCodedBlocks)                             # LDPC-Decoding\n",
    "decodedTxBlockWithCRC, crcMatch = ldpcDecoder.checkCrcAndMerge(decodedBlocks) # Checking CRC (Code-blocks)\n",
    "txBlockCrcMatch = ldpcDecoder.checkCrc(decodedTxBlockWithCRC,'24A')           # Checking CRC (Transport-block)\n",
    "decodedTxBlock = decodedTxBlockWithCRC[:-24]                                  # remove the transport-block CRC\n",
    "print(\"The number of bit mismatches between the decoded transport block and original:\",\n",
    "      np.abs(decodedTxBlock-txBlock).sum())                                   # Compare bit-streams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc23c412",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
