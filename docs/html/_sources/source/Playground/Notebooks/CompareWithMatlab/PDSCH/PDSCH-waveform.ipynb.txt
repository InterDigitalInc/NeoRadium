{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d490ad29-4e5d-4ecd-865d-1ebcf4a9f3ce",
   "metadata": {},
   "source": [
    "# PDSCH Waveform generation\n",
    "Creating PDSCH time domain waveform and comparing the results with the equivalent Matlab code \"MatlabFiles/PDSCH-waveform.mlx\". [Here](MatlabFiles/PDSCH-waveform.html) is the execution results of this code in Matlab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2415601e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.io\n",
    "\n",
    "from neoradium import Carrier, PDSCH, CdlChannel, AntennaPanel, LdpcEncoder, LdpcDecoder, Grid\n",
    "\n",
    "matlabFilesPath = \"./MatlabFiles\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fca47cf",
   "metadata": {},
   "source": [
    "## Carrier Configuration\n",
    "Create an instance of `Carrier` object. We use 30KHz subcarrier spacing, with a single Bandwidth Part starting at Resource Block 1, and 52 total Resource Blocks. We then call the `print` method to show the carrier information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ec0371b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Carrier Properties:\n",
      "  Cell Id:               1\n",
      "  Bandwidth Parts:       1\n",
      "  Active Bandwidth Part: 0\n",
      "  Bandwidth Part 0:\n",
      "    Resource Blocks:    52 RBs starting at 1 (624 subcarriers)\n",
      "    Subcarrier Spacing: 30 KHz\n",
      "    CP Type:            normal\n",
      "    bandwidth:          18.72 MHz\n",
      "    symbolsPerSlot:     14\n",
      "    slotsPerSubFrame:   2\n",
      "    nFFT:               1024\n",
      "    frameNo:            0\n",
      "    slotNo:             0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "carrier = Carrier(startRb=1, numRbs=52, spacing=30)\n",
    "carrier.print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ab89762",
   "metadata": {},
   "source": [
    "## PDSCH Configuration\n",
    "Create an instance of `PDSCH` object. We use the only Bandwidth Part of the above carrier for this PDSCH object. We then, enable the interleaving by setting the `interleavingBundleSize` argument to 2 and set number of layers to 2. The `print` function is then called to show all the information about this `PDSCH` object.\n",
    "\n",
    "Note that we could also set the parameters of `DMRS` object owned by `PDSCH` by passing them when instantiating the `PDSCH` object. Here we are just using the default values.\n",
    "\n",
    "Also note that the Matlab implementation does not take into account the scaling factor $ \\beta^{DMRS}_{PDSCH} $ as specified in newer versions of the standard. Our implementation by default uses the `TS 38.214 V17.0.0 (2021-12), Table 4.1-1` to get the ratio of PDSCH EPRE to DMRS EPRE ($ \\beta_{DMRS} $). To make our results match Matlab's results, we have to force the `epreRatioDb` value to zero here to ignore the table in the standard."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8477566a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "PDSCH Properties:\n",
      "  mappingType: A\n",
      "  nID: 1\n",
      "  rnti: 1\n",
      "  numLayers: 2\n",
      "  numCodewords: 1\n",
      "  modulation: 16QAM\n",
      "  portSet: [0, 1]\n",
      "  symSet:   0   1   2   3   4   5   6   7   8   9  10  11  12  13\n",
      "  prbSet:   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19\n",
      "           20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39\n",
      "           40  41  42  43  44  45  46  47  48  49  50  51\n",
      "  interleavingBundleSize: 2\n",
      "  PRG Size: Wideband\n",
      "  Bandwidth Part:\n",
      "    Resource Blocks:    52 RBs starting at 1 (624 subcarriers)\n",
      "    Subcarrier Spacing: 30 KHz\n",
      "    CP Type:            normal\n",
      "    bandwidth:          18.72 MHz\n",
      "    symbolsPerSlot:     14\n",
      "    slotsPerSubFrame:   2\n",
      "    nFFT:               1024\n",
      "    frameNo:            0\n",
      "    slotNo:             0\n",
      "  DMRS:\n",
      "    configType: 1\n",
      "    nIDs: []\n",
      "    scID: 0\n",
      "    sameSeq: 1\n",
      "    symbols: Single\n",
      "    typeA1stPos: 2\n",
      "    additionalPos: 0\n",
      "    cdmGroups: [0, 0]\n",
      "    deltaShifts: [0, 0]\n",
      "    allCdmGroups: [0, 1]\n",
      "    symSet: [2]\n",
      "    REs (before shift): [0, 2, 4, 6, 8, 10]\n",
      "    epreRatioDb: 0 (db)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pdsch = PDSCH(carrier.bwps[0], interleavingBundleSize=2, numLayers=2)\n",
    "# Matlab uses NumCDMGroupsWithoutData=2 as default => otherCdmGroups=[1]\n",
    "pdsch.setDMRS(epreRatioDb=0, otherCdmGroups=[1])\n",
    "pdsch.print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a09ec047",
   "metadata": {},
   "source": [
    "## Create a grid and populate it with DMRS data\n",
    "Now we can create a resource grid (A `Grid` object) for our `PDSCH` and populate it with DMRS data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c60825c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 14, 624)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid = pdsch.getGrid()   # This creates a Grid object and populates it with the DMRS values\n",
    "grid.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f150f663",
   "metadata": {},
   "source": [
    "## Comparing DMRS symbols\n",
    "Now we want to compare the DMRS symbols generated by our `PDSCH` object with Matlab's results. Again, we first get the indexes of the DMRS symbols from the grid map. Then we get the symbols at this indexes. We then print out the first 10 DMRS symbols. We can now compare these results with the ones printed by the Matlab program `Mapping5GPhysicalChannelsAndSignalsToTheResourceGridExample.mlx`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3748704",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DMRS Values:\n",
      " [ 0.70710678-0.70710678j  0.70710678+0.70710678j  0.70710678-0.70710678j\n",
      " -0.70710678-0.70710678j -0.70710678+0.70710678j  0.70710678+0.70710678j\n",
      "  0.70710678+0.70710678j  0.70710678+0.70710678j  0.70710678+0.70710678j\n",
      "  0.70710678+0.70710678j]\n",
      "Matlab-Generated DMRS Values:\n",
      " [ 0.70710678-0.70710678j  0.70710678+0.70710678j  0.70710678-0.70710678j\n",
      " -0.70710678-0.70710678j -0.70710678+0.70710678j  0.70710678+0.70710678j\n",
      "  0.70710678+0.70710678j  0.70710678+0.70710678j  0.70710678+0.70710678j\n",
      "  0.70710678+0.70710678j]\n"
     ]
    }
   ],
   "source": [
    "dmrsSymbols = grid.getReValues(\"DMRS\")  # Get all the \"DMRS\" Resource Element values from the grid\n",
    "\n",
    "# Load Matlab-generated DMRS values:\n",
    "dmrsSymbolsMatlab = scipy.io.loadmat(matlabFilesPath + '/dmrsSymbols.mat')['dmrsSymbols'].T.flatten()\n",
    "assert np.abs(dmrsSymbolsMatlab-dmrsSymbols).max()<1e-10, \"MISMATCH WITH MATLAB!!!\"\n",
    "\n",
    "# Print the first 10 DMRS Symbols:\n",
    "print(\"DMRS Values:\\n\",dmrsSymbols[:10])\n",
    "print(\"Matlab-Generated DMRS Values:\\n\",dmrsSymbolsMatlab[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10a9dae4",
   "metadata": {},
   "source": [
    "## Generate random bits and create resource block\n",
    "Here we first get the number of bits that are available in our `grid` object by calling the `getGridBitSize` method. Then we creare `numBits` random bits and feed them to the `populateGrid` method of `PDSCH`. This method scrambles, modulates, and map the modulated symbols to different layers of the grid.\n",
    "\n",
    "**Note**: To have deterministic results and be able to compare the results with matlab, we are reading the random bits from a Matlab-generated data file. You can un-remark the second line in the code below to create random bits instead of reading them from the file. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9870c354",
   "metadata": {},
   "outputs": [],
   "source": [
    "numBits = pdsch.getBitSizes(grid)\n",
    "# bits = np.random.randint(2,size=numBits)  # Unremark this to generate random bits\n",
    "\n",
    "# Loading the random bits from file to have deterministic resaults and be able to compare with matlab\n",
    "bits = scipy.io.loadmat(matlabFilesPath + '/pdschBits.mat')['pdschBits'].flatten()\n",
    "assert(numBits[0] == len(bits))\n",
    "\n",
    "pdsch.populateGrid(grid, bits)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff825c0e",
   "metadata": {},
   "source": [
    "## Comparing the results with Matlab\n",
    "Now we want to compare the generated symbols with the Matlab's results. We first get the data symbols from the `pdsch` object's `getDataSymbols` method which returns all data symbols in the grid. \n",
    "\n",
    "We then read all the Matlab-generated symbols (from the same random set of bits) from the file generated by the Matlab program `Mapping5GPhysicalChannelsAndSignalsToTheResourceGridExample.mlx`. \n",
    "\n",
    "As you can see the results exactly matches the ones generated by Matlab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e262fa82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Symbols:\n",
      " [ 0.31622777+0.31622777j -0.9486833 -0.9486833j  -0.9486833 -0.31622777j\n",
      " -0.31622777-0.31622777j  0.31622777-0.31622777j  0.9486833 +0.9486833j\n",
      "  0.9486833 +0.31622777j -0.9486833 -0.9486833j  -0.9486833 +0.9486833j\n",
      " -0.31622777+0.31622777j  0.9486833 +0.31622777j -0.9486833 -0.9486833j\n",
      "  0.9486833 -0.9486833j  -0.31622777+0.9486833j   0.9486833 -0.31622777j\n",
      " -0.31622777+0.9486833j   0.31622777+0.31622777j  0.31622777+0.9486833j\n",
      " -0.9486833 -0.31622777j -0.31622777+0.31622777j]\n",
      "Matlab-Generated Data Symbols:\n",
      " [ 0.31622777+0.31622777j -0.9486833 -0.9486833j  -0.9486833 -0.31622777j\n",
      " -0.31622777-0.31622777j  0.31622777-0.31622777j  0.9486833 +0.9486833j\n",
      "  0.9486833 +0.31622777j -0.9486833 -0.9486833j  -0.9486833 +0.9486833j\n",
      " -0.31622777+0.31622777j  0.9486833 +0.31622777j -0.9486833 -0.9486833j\n",
      "  0.9486833 -0.9486833j  -0.31622777+0.9486833j   0.9486833 -0.31622777j\n",
      " -0.31622777+0.9486833j   0.31622777+0.31622777j  0.31622777+0.9486833j\n",
      " -0.9486833 -0.31622777j -0.31622777+0.31622777j]\n"
     ]
    }
   ],
   "source": [
    "dataSymbols = pdsch.getDataSymbols(grid)\n",
    "\n",
    "dataSymbolsMatlab = scipy.io.loadmat(matlabFilesPath + '/pdschSymbols.mat')['pdschSymbols'].T.flatten()\n",
    "assert np.abs(dataSymbolsMatlab-dataSymbols).max()<1e-10, \"MISMATCH WITH MATLAB!!!\"\n",
    "\n",
    "# Print the first 20 Data Symbols:\n",
    "print(\"Data Symbols:\\n\", dataSymbols[:20])\n",
    "print(\"Matlab-Generated Data Symbols:\\n\", dataSymbolsMatlab[:20])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6a049dc",
   "metadata": {},
   "source": [
    "## Grid Statistics\n",
    "Now we can get some information about the resource grid statistics. The function `getStats` counts the number of resource elements allocated for data, DMRS, PTRS, reserved resources, and returns the information as a dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "264f3b1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GridSize  : 17472\n",
      "NO_DATA   : 624\n",
      "DMRS      : 624\n",
      "PDSCH     : 16224\n"
     ]
    }
   ],
   "source": [
    "stats = grid.getStats()\n",
    "for key,value in stats.items():  print(\"%-10s: %d\"%(key, value))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2cbb085",
   "metadata": {},
   "source": [
    "## Draw resource allocation map\n",
    "We can also draw the resource allocation map (before precoding) for different layers. For example, the following code uses the `drawMap` function to draw the resource map for the first two Resource Blocks of the grid in the first layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "40f29fc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid.drawMap(reRange=(0,12))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d4a485",
   "metadata": {},
   "source": [
    "## MIMO Precoding\n",
    "Now we can apply precoding to the our data grid. Assuming 4 transmit antenna, we create a simple precoding matrix which is based on Identity matrix. We then call the `precode` method of `grid` to get the precoded grid."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3be1d6c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2, 4),\n",
       " array([[ 0.35355339+0.j        ,  0.35355339+0.j        ,\n",
       "          0.35355339+0.j        ,  0.35355339+0.j        ],\n",
       "        [ 0.35355339+0.j        ,  0.        -0.35355339j,\n",
       "         -0.35355339+0.j        ,  0.        +0.35355339j]]))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numTxAntenna = 4\n",
    "w = np.fft.fft(np.eye(numTxAntenna))/np.sqrt(numTxAntenna)\n",
    "# Get a sub-matrix by using only the frist 'numLayers' rows and normalize it accordingly.\n",
    "w = w[:pdsch.numLayers,:]/np.sqrt(pdsch.numLayers)\n",
    "\n",
    "w.shape,w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "171fb971",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2, 14, 624), (2, 4), (4, 14, 624))"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precodedGrid = grid.precode(w.T)\n",
    "grid.shape, w.shape, precodedGrid.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f47323e5",
   "metadata": {},
   "source": [
    "We can now compare these results with the ones printed by the Matlab program `Mapping5GPhysicalChannelsAndSignalsToTheResourceGridExample.mlx`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "73d03da3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precoded Grid:\n",
      " [ 0.2236+0.4472j -0.2236-0.6708j -0.2236-0.2236j  0.2236+0.j\n",
      "  0.4472-0.2236j  0.4472+0.j      0.6708+0.j     -0.6708-0.4472j\n",
      " -0.2236+0.j     -0.4472+0.j    ]\n",
      "Matlab-Generated Precoded Grid:\n",
      " [ 0.2236+0.4472j -0.2236-0.6708j -0.2236-0.2236j  0.2236-0.j\n",
      "  0.4472-0.2236j  0.4472-0.j      0.6708+0.j     -0.6708-0.4472j\n",
      " -0.2236-0.j     -0.4472+0.j    ]\n"
     ]
    }
   ],
   "source": [
    "pdschGridMatlab = scipy.io.loadmat(matlabFilesPath + '/pdschGrid.mat')['pdschGrid']\n",
    "pdschGridMatlab = np.transpose(pdschGridMatlab, (2,1,0)) # Matlab uses a different order\n",
    "assert np.abs(pdschGridMatlab-precodedGrid.grid).max()<1e-10, \"MISMATCH WITH MATLAB!!!\"\n",
    "\n",
    "# Print the first 10 Data Symbols:\n",
    "print(\"Precoded Grid:\\n\", np.round(precodedGrid[0,0,:10],4))\n",
    "print(\"Matlab-Generated Precoded Grid:\\n\", np.round(pdschGridMatlab[0,0,:10],4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df7af778",
   "metadata": {},
   "source": [
    "## OFDM Modulation\n",
    "Now we call the `ofdmModulate` method of our `precodedGrid` object to get the output waveform for each antenna and compare these results with the ones printed by the Matlab program `Mapping5GPhysicalChannelsAndSignalsToTheResourceGridExample.mlx`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ed6258c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Waveform Properties:\n",
      "  Number of Ports: 4\n",
      "  Length: 15360\n",
      "\n",
      "Waveform Data:\n",
      " [ 0.0053-0.0104j  0.0072+0.0016j -0.0017+0.0071j -0.0086-0.0011j\n",
      "  0.0063-0.0057j  0.0191-0.0001j  0.0044+0.004j  -0.015 +0.0036j\n",
      " -0.0155+0.0084j -0.008 +0.015j ]\n",
      "Matlab-Generated Waveform Data:\n",
      " [ 0.0053-0.0104j  0.0072+0.0016j -0.0017+0.0071j -0.0086-0.0011j\n",
      "  0.0063-0.0057j  0.0191-0.0001j  0.0044+0.004j  -0.015 +0.0036j\n",
      " -0.0155+0.0084j -0.008 +0.015j ]\n"
     ]
    }
   ],
   "source": [
    "waveForm = precodedGrid.ofdmModulate()\n",
    "waveForm.print()\n",
    "waveformMatlab = scipy.io.loadmat(matlabFilesPath + '/txWaveform.mat')['txWaveform'].T\n",
    "assert np.abs(waveForm[:]-waveformMatlab).max()<1e-10, \\\n",
    "    \"MISMATCH WITH MATLAB!!! (max Diff: %f)\"%(np.abs(waveForm-waveformMatlab).max())\n",
    "\n",
    "# print the first 10 samples of the waveForm for first TX antenna\n",
    "print(\"Waveform Data:\\n\", np.round(waveForm[0,:10],4))\n",
    "print(\"Matlab-Generated Waveform Data:\\n\", np.round(waveformMatlab[0,:10],4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1b39f25b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Magnitude of the time-domain waveform for the first antenna')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(np.abs(waveForm[0]))\n",
    "plt.xlabel(\"Samples\", fontsize=16)\n",
    "plt.ylabel(\"Magnitude\", fontsize=16)\n",
    "plt.title(\"Magnitude of the time-domain waveform for the first antenna\", fontsize=18)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f82764a2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
