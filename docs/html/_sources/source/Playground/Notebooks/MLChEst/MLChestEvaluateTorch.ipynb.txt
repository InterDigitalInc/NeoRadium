{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7b5fd8d3",
   "metadata": {},
   "source": [
    "# Evaluating the Trained Channel Estimator\n",
    "Now that we have a trained model, we can use it in the communication pipeline and compare its performance with baselines. In this case we compare it with perfect channel estimation and **NeoRadium**'s Least-Square channel estimation method.\n",
    "\n",
    "The following diagram shows the pipeline used for evaluation of our deep-learning-based channel estimator.\n",
    "\n",
    "![Evaluation-Pipeline](EvalPipeline.png)\n",
    "\n",
    "So, lets get started by importing the required modules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2415601e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.io\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from neoradium import Carrier, PDSCH, CdlChannel, AntennaPanel, Grid, random\n",
    "\n",
    "import torch\n",
    "from torch import nn"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebe23527",
   "metadata": {},
   "source": [
    "## Load the trained model\n",
    "Here we define the channel estimator model and initialize it with the trained parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8c2ba366",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using 'Cuda' device.\n"
     ]
    }
   ],
   "source": [
    "# ResNet Block\n",
    "class ResBlock(nn.Module):\n",
    "    def __init__(self, inDepth, midDepth, outDepth, kernel=(3,3), stride=(1,1)):\n",
    "        super().__init__()\n",
    "        if isinstance(stride, int): stride = (stride, stride)\n",
    "        if isinstance(kernel, int): kernel = (kernel, kernel)\n",
    "        \n",
    "        self.conv1 = nn.Conv2d(inDepth, midDepth, 1, stride, padding='valid')  # 1x1 conv.\n",
    "        self.bn1 = nn.BatchNorm2d(midDepth)\n",
    "        self.conv2 = nn.Conv2d(midDepth, midDepth, kernel, padding='same')\n",
    "        self.bn2 = nn.BatchNorm2d(midDepth)\n",
    "        self.conv3 = nn.Conv2d(midDepth, outDepth, 1, stride, padding='valid') # 1x1 conv.\n",
    "        self.bn3 = nn.BatchNorm2d(outDepth)\n",
    "        self.relu = nn.ReLU(inplace=True)\n",
    "        \n",
    "        self.downSampleNet = None\n",
    "        if ((stride != (1,1)) or (inDepth!=outDepth)):\n",
    "            self.downSampleNet = nn.Sequential(nn.Conv2d(inDepth, outDepth, 1, stride),  # 1x1 conv.\n",
    "                                               nn.BatchNorm2d(outDepth) )\n",
    "\n",
    "        for bn in [self.bn1, self.bn2, self.bn3]:\n",
    "            nn.init.ones_(bn.weight)\n",
    "            nn.init.zeros_(bn.bias)\n",
    "            \n",
    "        for conv in [self.conv1, self.conv2, self.conv3]:\n",
    "            nn.init.trunc_normal_(conv.weight, std=1/np.sqrt(np.prod(list(conv.weight.shape)[1:]))) \n",
    "            nn.init.zeros_(conv.bias)\n",
    "            \n",
    "        nn.init.zeros_(self.bn3.weight)  # This could improve results. It makes the block start like identity.\n",
    "            \n",
    "    def forward(self, x):\n",
    "        out = self.conv1(x)\n",
    "        out = self.bn1(out)\n",
    "        out = self.relu(out)\n",
    "        \n",
    "        out = self.conv2(out)\n",
    "        out = self.bn2(out)\n",
    "        out = self.relu(out)\n",
    "        \n",
    "        out = self.conv3(out)\n",
    "        out = self.bn3(out)\n",
    "        \n",
    "        if self.downSampleNet is None:  out += x\n",
    "        else:                           out += self.downSampleNet(x)\n",
    "        out = self.relu(out)\n",
    "        \n",
    "        return out\n",
    "    \n",
    "# The Channel Estimator model\n",
    "class ChEstNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.res1 = ResBlock(2, 16, 64, (9,11))   # Res Block 9x11 kernel\n",
    "        self.res2 = ResBlock(64, 16, 64, (3,7))   # Res Block 3x7 kernel\n",
    "        self.res3 = ResBlock(64, 16, 64, (3,7))   # Res Block 3x7 kernel\n",
    "        \n",
    "        self.conv = nn.Conv2d(64, 2, 3, padding='same')\n",
    "        nn.init.trunc_normal_(self.conv.weight, std=1/np.sqrt(np.prod(list(self.conv.weight.shape)[1:]))) \n",
    "        nn.init.zeros_(self.conv.bias)\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = self.res1(x)\n",
    "        out = self.res2(out)\n",
    "        out = self.res3(out)\n",
    "        out = self.conv(out)\n",
    "        return out\n",
    "    \n",
    "# Checking GPU availability\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"mps\" if torch.backends.mps.is_available() else \"cpu\"\n",
    "print(\"Using '%s' device.\"%({'cuda':'Cuda', 'mps':'Metal','cpu':'CPU'}[device]))\n",
    "\n",
    "# Instantiate the model and move it to the target device\n",
    "model = ChEstNet().to(device)\n",
    "\n",
    "# Load the trained model parameters:\n",
    "# Note: The model file \"ChEstModel-300.pth\" was trained with 300 epochs using a parameter search. It performs\n",
    "# better than the model trained in the previous step with 100 epochs. You can try both by choosing the \n",
    "# corresponding line below.\n",
    "model.load_state_dict(torch.load('Models/ChEstModelWeights.pth', map_location=device)); # From prev. step.\n",
    "# model.load_state_dict(torch.load('Models/ChEstModel-300.pth', map_location=device));  # Trained for 300 Epochs\n",
    "model.eval();  # Set the model to evaluation mode\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ecab548",
   "metadata": {},
   "source": [
    "## ``mlChanEst`` function\n",
    "The ``mlChanEst`` function in the following cell receives the DMRS information, the received resource grid, and the trained model as input. It first calculates the channel estimates at the pilot locations using LS method and then converts these estimates to a set of ``L x K`` complex matrixes that are fed to the model for inference. (``L`` is the number of OFDM symbols per slot and ``K`` is the number of subcarriers) \n",
    "\n",
    "The model outputs another set of ``L x K`` matrixes which contain the predicted channel information. These matrixes are then re-packaged as a 4-D complex numpy array that is returned as the estimated channel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a56e6fd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mlChanEst(dmrs, rxGrid, model):\n",
    "    rsGrid = rxGrid.bwp.createGrid( len(dmrs.pxxch.portSet) )   # Create an empty resource grid\n",
    "    dmrs.populateGrid(rsGrid)                                   # Populate the grid with DMRS values\n",
    "    rsIndexes = rsGrid.getReIndexes(\"DMRS\")                     # This contains the locations of DMRS values\n",
    "  \n",
    "    rr, ll, kk = rxGrid.shape           # Number of RX antenna, Number of symbols, Number of subcarriers\n",
    "    pp, ll2, kk2 = rsGrid.shape         # Number of Ports (From DMRS)\n",
    "    if (ll!=ll2) or (kk!=kk2): raise ValueError(\"The Gird size (%dx%d) does not match the DMRs (%dx%d).\"%(ll,kk,ll2,kk2))\n",
    "\n",
    "    modelIn = []\n",
    "    for p in range(pp):                             # For each DMRS port (i.e. each layer)\n",
    "        portLs = rsIndexes[1][(rsIndexes[0]==p)]    # Indexes of symbols containing pilots in this port\n",
    "        portKs = rsIndexes[2][(rsIndexes[0]==p)]    # Indexes of subcarriers containing pilots in this port\n",
    "\n",
    "        ls = np.unique(portLs)                      # Unique Indexes of symbols containing pilots in this port\n",
    "        ks = portKs[portLs==ls[0]]                  # Unique Indexes of subcarriers containing pilots in this port\n",
    "        numLs, numKs = len(ls), len(ks)             # Number of OFDM symbols and number of subcarriers\n",
    "\n",
    "        pilotValues = rsGrid[p,ls,:][:,ks]                           # Pilot values in this port\n",
    "        rxValues = rxGrid.grid[:,ls,:][:,:,ks]                       # Received values for pilot signals\n",
    "        hEst = np.transpose(rxValues/pilotValues[None,:,:], (1,2,0)) # Channel estimates at pilot locations (L,K,Nr)\n",
    "        for r in range(rr):                                         # For each receiver antenna\n",
    "            inH = np.zeros((2,)+rxGrid.shape[1:], dtype=np.float64) # Create one 3D matrix with all zeros\n",
    "            for li,l in enumerate(ls):\n",
    "                inH[0,l,ks] = hEst[li,:,r].real             # Set the LS estimates at pilot location (Real)\n",
    "                inH[1,l,ks] = hEst[li,:,r].imag             # Set the LS estimates at pilot location (Imaginary)\n",
    "            modelIn += [ inH ]\n",
    "\n",
    "    # Package all inputs as a batch in a PyTorch tensor\n",
    "    modelIn = torch.from_numpy( np.float32(np.stack(modelIn)) ).to(device)    \n",
    "    with torch.no_grad(): modelOut = model(modelIn)        # Run inference for the whole batch\n",
    "    modelOut = modelOut.cpu().numpy()                      # Bring the results back to CPU and convert to numpy\n",
    "    estChan = np.transpose( modelOut.reshape((pp,rr)+modelOut.shape[1:]), (3,4,1,0,2) )  # Convert to a 5-D tensor\n",
    "    estChan = estChan[...,0] + 1j*estChan[...,1]           # Convert to a 4-D complex tensor\n",
    "    return estChan\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35d7033d",
   "metadata": {},
   "source": [
    "## Evaluation Pipeline\n",
    "The following cell implements the evaluation pipeline as shown above. It runs the pipeline 3 times with perfect, ML, and LS channel estimation methods and prints the results at the end. As it can be seen, the ML-based channel estimation performs better than LS method which is based on interpolation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "64a5cf3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Simulating end-to-end for \"16QAM\", with \"Perfect\" channel estimation, in time domain.\n",
      "SNR(dB)   Total Bits   Bit Errors   BER(%)   time(Sec.)\n",
      "-------   ----------   ----------   ------   ----------\n",
      "    5       2545920      1036799     40.72     10.68\n",
      "   10       2545920       850716     33.41     10.37\n",
      "   15       2545920       606267     23.81     10.36\n",
      "   20       2545920       350625     13.77     10.40\n",
      "   25       2545920       145817      5.73     10.51\n",
      "\n",
      "Simulating end-to-end for \"16QAM\", with \"ML\" channel estimation, in time domain.\n",
      "SNR(dB)   Total Bits   Bit Errors   BER(%)   time(Sec.)\n",
      "-------   ----------   ----------   ------   ----------\n",
      "    5       2545920      1082460     42.52     10.93\n",
      "   10       2545920       887201     34.85     10.81\n",
      "   15       2545920       636788     25.01     10.74\n",
      "   20       2545920       388967     15.28     10.62\n",
      "   25       2545920       196876      7.73     10.67\n",
      "\n",
      "Simulating end-to-end for \"16QAM\", with \"LS\" channel estimation, in time domain.\n",
      "SNR(dB)   Total Bits   Bit Errors   BER(%)   time(Sec.)\n",
      "-------   ----------   ----------   ------   ----------\n",
      "    5       2545920      1138786     44.73     10.64\n",
      "   10       2545920       968019     38.02     10.74\n",
      "   15       2545920       717426     28.18     10.73\n",
      "   20       2545920       448406     17.61     10.74\n",
      "   25       2545920       217902      8.56     10.71\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "numFrames = 2                               # Number of time-domain frames\n",
    "snrDbs = [5,10,15,20,25]                    # SNR values (in dB) for which we want to evaluate the model\n",
    "freqDomain = False                          # Set to True to apply channel in frequency domain\n",
    "\n",
    "carrier = Carrier(numRbs=51, spacing=30)    # Create a carrier with 51 RBs and 30KHz subcarrier spacing\n",
    "bwp = carrier.curBwp                        # The only bandwidth part in the carrier\n",
    "\n",
    "# Create a PDSCH object\n",
    "pdsch = PDSCH(bwp, interleavingBundleSize=0, numLayers=2, nID=carrier.cellId, modulation=\"16QAM\")\n",
    "pdsch.setDMRS(prgSize=0, configType=2, additionalPos=2)     # Specify the DMRS configuration\n",
    "\n",
    "numSlots = bwp.slotsPerFrame*numFrames                      # Total number of slots\n",
    "results = {}                                                # Dictionary to save the results\n",
    "\n",
    "for chanEstMethod in [\"Perfect\", \"ML\", \"LS\"]:               # Three different channel estimation methods\n",
    "    results[chanEstMethod] = {}\n",
    "    print(\"\\nSimulating end-to-end for \\\"%s\\\", with \\\"%s\\\" channel estimation, in %s domain.\"%\n",
    "          (\"16QAM\", chanEstMethod, \"frequency\" if freqDomain else \"time\"))\n",
    "    print(\"SNR(dB)   Total Bits   Bit Errors   BER(%)   time(Sec.)\")\n",
    "    print(\"-------   ----------   ----------   ------   ----------\")\n",
    "    for snrDb in snrDbs:                                # For each SNR value in snrDbs\n",
    "        random.setSeed(123)                             # Making the results reproducible for each SNR\n",
    "        t0 = time.time()                                # Start time for each SNR\n",
    "        carrier.slotNo = 0\n",
    "\n",
    "        # Creating a CdlChannel object\n",
    "        channel = CdlChannel('C', delaySpread=300, carrierFreq=4e9, dopplerShift=5,\n",
    "                             txAntenna = AntennaPanel([2,2], polarization=\"x\"),  # 8 TX antenna\n",
    "                             rxAntenna = AntennaPanel([1,1], polarization=\"+\"),  # 2 RX antenna\n",
    "                             seed = 123,\n",
    "                             timing = \"nearest\")  \n",
    "\n",
    "        bitErrors = 0\n",
    "        totalBits = 0\n",
    "\n",
    "        for slotNo in range(numSlots):\n",
    "            grid = pdsch.getGrid()                      # Create a resource grid populated with DMRS\n",
    "            numBits = pdsch.getBitSizes(grid)[0]        # Number of bits available in the resource grid\n",
    "            txBits = random.bits(numBits)               # Create random binary data\n",
    "\n",
    "            pdsch.populateGrid(grid, txBits)            # Map/modulate the data to the resource grid\n",
    "\n",
    "            # Store the indexes of the PDSCH data in pdschIndexes to be used later.\n",
    "            pdschIndexes = pdsch.getReIndexes(grid, \"PDSCH\")   \n",
    "\n",
    "            # Getting the Precoding Matrix, and precoding the resource grid\n",
    "            channelMatrix = channel.getChannelMatrix(bwp)           # Get the channel matrix\n",
    "            precoder = pdsch.getPrecodingMatrix(channelMatrix)      # Get the precoder matrix from PDSCH object\n",
    "            precodedGrid = grid.precode(precoder)                   # Perform the precoding\n",
    "\n",
    "            if freqDomain:\n",
    "                rxGrid = precodedGrid.applyChannel(channelMatrix)   # Apply the channel in frequency domain\n",
    "                rxGrid = rxGrid.addNoise(snrDb=snrDb)               # Add noise\n",
    "            else:\n",
    "                txWaveform = precodedGrid.ofdmModulate()            # OFDM Modulation\n",
    "                maxDelay = channel.getMaxDelay()                    # Get the max. channel delay\n",
    "                txWaveform = txWaveform.pad(maxDelay)               # Pad with zeros\n",
    "                rxWaveform = channel.applyToSignal(txWaveform)      # Apply channel in time domain\n",
    "                noisyRxWaveform = rxWaveform.addNoise(snrDb=snrDb, nFFT=bwp.nFFT)  # Add noise\n",
    "                offset = channel.getTimingOffset()                  # Get timing info for synchronization\n",
    "                syncedWaveform = noisyRxWaveform.sync(offset)       # Synchronization\n",
    "                rxGrid = syncedWaveform.ofdmDemodulate(bwp)         # OFDM demodulation\n",
    "                \n",
    "            if chanEstMethod == \"Perfect\":                          # Perfect Channel Estimation\n",
    "                estChannelMatrix = channelMatrix @ precoder[None,...]\n",
    "            elif chanEstMethod == \"LS\":                             # LS + Interpolation Channel Estimation\n",
    "                estChannelMatrix, noiseEst = rxGrid.estimateChannelLS(pdsch.dmrs, polarInt=False, \n",
    "                                                                      kernel='linear')\n",
    "            elif chanEstMethod == \"ML\":                             # ML-Based Channel Estimation\n",
    "                estChannelMatrix = mlChanEst(pdsch.dmrs, rxGrid, model)\n",
    "            else: assert(0)\n",
    "\n",
    "            eqGrid, llrScales = rxGrid.equalize(estChannelMatrix)           # Equalization\n",
    "\n",
    "            rxBits = pdsch.getHardBitsFromGrid(eqGrid, pdschIndexes)[0]     # Demodulation\n",
    "            bitErrors += np.abs(rxBits-txBits).sum()                        # Calculating number of bit errors\n",
    "            totalBits += numBits\n",
    "            print(\"\\r  %3d      %8d     %8d    %6.2f    %6.2f\"%(snrDb, totalBits, bitErrors, \n",
    "                                                                bitErrors*100/totalBits,time.time()-t0),end='')\n",
    "\n",
    "            carrier.goNext()                        # Prepare the carrier object for the next slot\n",
    "            channel.goNext()                        # Prepare the channel model for the next slot\n",
    "\n",
    "        dt = time.time()-t0                         # Total time for this SNR\n",
    "        results[chanEstMethod][snrDb] = {\"totalBits\":totalBits, \n",
    "                                         \"bitErrors\":bitErrors, \n",
    "                                         \"BER\":      bitErrors*100/totalBits,\n",
    "                                         \"Time\":     dt}\n",
    "        print(\"\\r  %3d      %8d     %8d    %6.2f    %6.2f\"%(snrDb, totalBits, bitErrors, \n",
    "                                                        bitErrors*100/totalBits, dt))\n",
    "    \n",
    "# Compare the results in a plot:\n",
    "for i,chanEstMethod in enumerate(['Perfect', 'ML', 'LS']):\n",
    "    bers = [results[chanEstMethod][snrDb][\"BER\"] for snrDb in snrDbs]\n",
    "    plt.plot(snrDbs, bers, label=chanEstMethod)\n",
    "plt.legend()\n",
    "plt.title(\"Bit Error Rate for different mothods of Channel Estimation.\");\n",
    "plt.grid()\n",
    "plt.xlabel(\"SNR\")\n",
    "plt.xticks(snrDbs)\n",
    "plt.ylabel(\"BER (%)\")\n",
    "plt.yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0e14764",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
