{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e8d3158b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "acedf65c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def textEnumErrorMsg(var, valids):\n",
    "    if type(valids[0])==str:\n",
    "        return \"Invalid '%s'! (It must be one of %s)\"%(var, \", \".join([\"'%s'\"%(str(x)) for x in valids[:-1]]) + \", or '%s'\"%(str(valids[-1])))\n",
    "    return \"Invalid '%s'! (It must be one of %s)\"%(var, \", \".join([\"%s\"%(str(x)) for x in valids[:-1]]) + \", or %s\"%(str(valids[-1])))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "2832d806",
   "metadata": {},
   "outputs": [],
   "source": [
    "def enumErrorMsg(var, valids):\n",
    "    if type(valids)==list:\n",
    "        formatStr = \"'%s'\" if type(valids[0])==str else \"%s\"\n",
    "        return \"Invalid '%s'! ('%s' ∈ {%s})\"%(var, var, \", \".join([formatStr%str(x) for x in valids]))\n",
    "    \n",
    "    if type(valids)==tuple and len(valids)==2:\n",
    "        formatStr = \"'%s'\" if type(valids[0])==str else \"%s\"\n",
    "        return \"Invalid '%s'! ('%s' ∈ {%s})\"%(var, var, \",...,\".join([formatStr%str(x) for x in valids]))\n",
    "    \n",
    "    formatStr = \"'%s'\" if type(valids)==str else \"%s\"\n",
    "    return \"Invalid '%s'! (It must be \"%(var) + formatStr%str(valids) + \")\"\n",
    "\n",
    "def validateRange(var, valids, context=\"\", varName=None):\n",
    "    if varName is None:\n",
    "        import inspect\n",
    "        frame = inspect.getouterframes(inspect.currentframe())[1]\n",
    "        string = inspect.getframeinfo(frame[0]).code_context[0].strip()\n",
    "        varName = string[string.find('(') + 1:-1].split(',')[0].strip(\"self.\")\n",
    "\n",
    "    if type(valids)==list:\n",
    "        if var in valids:                      return\n",
    "        fStr = \"'%s'\" if type(valids[0])==str else \"%s\"\n",
    "        raise ValueError(\"Invalid '%s'! ('%s' ∈ {%s}%s)\"%(varName, varName,\n",
    "                                                        \", \".join([fStr%str(x) for x in valids]), context))\n",
    "\n",
    "    if type(valids)==tuple and len(valids)==2:\n",
    "        if var in range(valids[0],valids[1]+1): return\n",
    "        fStr = \"'%s'\" if type(valids[0])==str else \"%s\"\n",
    "        raise ValueError(\"Invalid '%s'! ('%s' ∈ {%s}%s)\"%(varName, varName,\n",
    "                                                        \",...,\".join([fStr%str(x) for x in valids]), context))\n",
    "\n",
    "    if var==valids:                              return\n",
    "    fStr = \"'%s'\" if type(valids)==str else \"%s\"\n",
    "    raise ValueError(\"Invalid '%s'! (It must be \"%(varName) + fStr%str(valids) + context + \")\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "e3afca56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "364.0"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.special import comb\n",
    "comb(14, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "0fe75d1b",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Invalid 'a'! ('a' ∈ {1,...,10} when my context)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[81], line 6\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39ma \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m122\u001b[39m\n\u001b[1;32m      4\u001b[0m         validateRange(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39ma, (\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m10\u001b[39m), \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m when my context\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m----> 6\u001b[0m b \u001b[38;5;241m=\u001b[39m \u001b[43mcl\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[81], line 4\u001b[0m, in \u001b[0;36mcl.__init__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39ma \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m122\u001b[39m\n\u001b[0;32m----> 4\u001b[0m     \u001b[43mvalidateRange\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43ma\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m when my context\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[78], line 29\u001b[0m, in \u001b[0;36mvalidateRange\u001b[0;34m(var, valids, context, varName)\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m var \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(valids[\u001b[38;5;241m0\u001b[39m],valids[\u001b[38;5;241m1\u001b[39m]\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m): \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m     28\u001b[0m     fStr \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(valids[\u001b[38;5;241m0\u001b[39m])\u001b[38;5;241m==\u001b[39m\u001b[38;5;28mstr\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m---> 29\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m! (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m ∈ \u001b[39m\u001b[38;5;124m{\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m}\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m)\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m%\u001b[39m(varName, varName,\n\u001b[1;32m     30\u001b[0m                                                     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m,...,\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin([fStr\u001b[38;5;241m%\u001b[39m\u001b[38;5;28mstr\u001b[39m(x) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m valids]), context))\n\u001b[1;32m     32\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m var\u001b[38;5;241m==\u001b[39mvalids:                              \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m     33\u001b[0m fStr \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(valids)\u001b[38;5;241m==\u001b[39m\u001b[38;5;28mstr\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[0;31mValueError\u001b[0m: Invalid 'a'! ('a' ∈ {1,...,10} when my context)"
     ]
    }
   ],
   "source": [
    "class cl:\n",
    "    def __init__(self):\n",
    "        self.a = 122\n",
    "        validateRange(self.a, (1,10), \" when my context\")\n",
    "\n",
    "b = cl()\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "abf35630",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a123\n"
     ]
    }
   ],
   "source": [
    "a123 = 123\n",
    "def f(var):\n",
    "    frame = inspect.getouterframes(inspect.currentframe())[1]\n",
    "    string = inspect.getframeinfo(frame[0]).code_context[0].strip()\n",
    "    varName = string[string.find('(') + 1:-1].split(',')[0]\n",
    "    print(varName)\n",
    "\n",
    "f(a123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1afe63f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Invalid 'par'! (It must be '(12,1,3)')\""
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "enumErrorMsg(\"par\", \"(12,1,3)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6cd8e0c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(\"Invalid 'par'! ('par' ∈ {1, 2, 3, 4})\",\n",
       " \"Invalid 'par'! ('par' ∈ {1,...,4})\",\n",
       " \"Invalid 'par'! (It must be 3)\")"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "enumErrorMsg(\"par\", [1,2,3,4]), enumErrorMsg(\"par\", (1,4)), enumErrorMsg(\"par\", \"shahab\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8fe25c06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4, 2, 1),\n",
       " array([[ 0.70710678+0.j        ,  0.70710678+0.j        ],\n",
       "        [ 0.70710678+0.j        ,  0.        +0.70710678j],\n",
       "        [ 0.70710678+0.j        , -0.70710678+0.j        ],\n",
       "        [ 0.70710678+0.j        , -0.        -0.70710678j]]))"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codebooks = np.array([ [[1], [1]], [[1], [1j]], [[1], [-1]], [[1], [-1j]] ])/np.sqrt(2)\n",
    "codebooks.shape, codebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "48f08389",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0.70710678+0.j        ],\n",
       "        [ 0.70710678+0.j        ]],\n",
       "\n",
       "       [[ 0.        +0.j        ],\n",
       "        [ 0.        +0.j        ]],\n",
       "\n",
       "       [[ 0.70710678+0.j        ],\n",
       "        [-0.70710678+0.j        ]],\n",
       "\n",
       "       [[ 0.70710678+0.j        ],\n",
       "        [-0.        -0.70710678j]]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codebooks[1] = [[0],[0]]\n",
    "codebooks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d995dd87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0.70710678+0.j        ],\n",
       "        [ 0.70710678+0.j        ]],\n",
       "\n",
       "       [[ 0.70710678+0.j        ],\n",
       "        [ 0.        +0.70710678j]],\n",
       "\n",
       "       [[ 0.70710678+0.j        ],\n",
       "        [-0.70710678+0.j        ]],\n",
       "\n",
       "       [[ 0.70710678+0.j        ],\n",
       "        [-0.        -0.70710678j]]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codebooks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "45085424",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2, 2, 2),\n",
       " array([[ 0.70710678+0.j        ,  0.70710678+0.j        ],\n",
       "        [ 0.70710678+0.j        ,  0.        +0.70710678j],\n",
       "        [ 0.70710678+0.j        , -0.70710678+0.j        ],\n",
       "        [ 0.70710678+0.j        , -0.        -0.70710678j]]))"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codebooks = np.array([ [[1, 1], [1, -1]], [[1, 1], [1j, -1j]] ])/2\n",
    "codebooks.shape, codebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8857f068",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0.70710678+0.j],\n",
       "        [ 0.70710678+0.j]],\n",
       "\n",
       "       [[ 0.        +0.j],\n",
       "        [ 0.        +0.j]],\n",
       "\n",
       "       [[ 0.70710678+0.j],\n",
       "        [-0.70710678+0.j]],\n",
       "\n",
       "       [[ 0.        +0.j],\n",
       "        [ 0.        +0.j]]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codebooksAllowed = \"110101\"\n",
    "codebooks = np.array([ [[1], [1]], [[1], [1j]], [[1], [-1]], [[1], [-1j]] ])/np.sqrt(2)\n",
    "for i in range(4):\n",
    "    if codebooksAllowed[-i-1]=='0':  # Codebook i is restricted\n",
    "        codebooks[i] = 0\n",
    "codebooks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1ae112fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0.5+0.j,  0.5+0.j],\n",
       "        [ 0.5+0.j, -0.5+0.j]],\n",
       "\n",
       "       [[ 0. +0.j,  0. +0.j],\n",
       "        [ 0. +0.j,  0. +0.j]]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codebooksAllowed = \"010101\"\n",
    "codebooks = np.array([ [[1, 1], [1, -1]], [[1, 1], [1j, -1j]] ])/2\n",
    "for i in [4,5]:\n",
    "    if codebooksAllowed[-i-1]=='0':  # Codebook i is restricted\n",
    "        codebooks[i-4] = 0\n",
    "codebooks\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fab317d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [1,2]\n",
    "b = [3,4,5]\n",
    "uum = np.int32([[2,3],[4,5],[6,7]])\n",
    "uul = np.int32([[5,6,7],[5,6,7],[5,6,7],[5,6,7]])\n",
    "# np.outer(uul, uum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "72dd204e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((5, 4),\n",
       " array([[ 3,  4,  5,  6],\n",
       "        [ 6,  8, 10, 12],\n",
       "        [ 9, 12, 15, 18],\n",
       "        [12, 16, 20, 24],\n",
       "        [15, 20, 25, 30]]))"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [1,2,3,4,5]\n",
    "b = [3,4,5,6]\n",
    "ab = np.outer(a, b)\n",
    "ab.shape, ab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b0059fa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((3, 4),\n",
       " array([[54, 60, 66, 72],\n",
       "        [63, 70, 77, 84],\n",
       "        [72, 80, 88, 96]]))"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c= [6,7,8]\n",
    "d = [9,10,11,12]\n",
    "cd = np.outer(c, d)\n",
    "cd.shape, cd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "69694815",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((5, 4, 3, 4),\n",
       " array([[[[ 162,  180,  198,  216],\n",
       "          [ 189,  210,  231,  252],\n",
       "          [ 216,  240,  264,  288]],\n",
       " \n",
       "         [[ 216,  240,  264,  288],\n",
       "          [ 252,  280,  308,  336],\n",
       "          [ 288,  320,  352,  384]],\n",
       " \n",
       "         [[ 270,  300,  330,  360],\n",
       "          [ 315,  350,  385,  420],\n",
       "          [ 360,  400,  440,  480]],\n",
       " \n",
       "         [[ 324,  360,  396,  432],\n",
       "          [ 378,  420,  462,  504],\n",
       "          [ 432,  480,  528,  576]]],\n",
       " \n",
       " \n",
       "        [[[ 324,  360,  396,  432],\n",
       "          [ 378,  420,  462,  504],\n",
       "          [ 432,  480,  528,  576]],\n",
       " \n",
       "         [[ 432,  480,  528,  576],\n",
       "          [ 504,  560,  616,  672],\n",
       "          [ 576,  640,  704,  768]],\n",
       " \n",
       "         [[ 540,  600,  660,  720],\n",
       "          [ 630,  700,  770,  840],\n",
       "          [ 720,  800,  880,  960]],\n",
       " \n",
       "         [[ 648,  720,  792,  864],\n",
       "          [ 756,  840,  924, 1008],\n",
       "          [ 864,  960, 1056, 1152]]],\n",
       " \n",
       " \n",
       "        [[[ 486,  540,  594,  648],\n",
       "          [ 567,  630,  693,  756],\n",
       "          [ 648,  720,  792,  864]],\n",
       " \n",
       "         [[ 648,  720,  792,  864],\n",
       "          [ 756,  840,  924, 1008],\n",
       "          [ 864,  960, 1056, 1152]],\n",
       " \n",
       "         [[ 810,  900,  990, 1080],\n",
       "          [ 945, 1050, 1155, 1260],\n",
       "          [1080, 1200, 1320, 1440]],\n",
       " \n",
       "         [[ 972, 1080, 1188, 1296],\n",
       "          [1134, 1260, 1386, 1512],\n",
       "          [1296, 1440, 1584, 1728]]],\n",
       " \n",
       " \n",
       "        [[[ 648,  720,  792,  864],\n",
       "          [ 756,  840,  924, 1008],\n",
       "          [ 864,  960, 1056, 1152]],\n",
       " \n",
       "         [[ 864,  960, 1056, 1152],\n",
       "          [1008, 1120, 1232, 1344],\n",
       "          [1152, 1280, 1408, 1536]],\n",
       " \n",
       "         [[1080, 1200, 1320, 1440],\n",
       "          [1260, 1400, 1540, 1680],\n",
       "          [1440, 1600, 1760, 1920]],\n",
       " \n",
       "         [[1296, 1440, 1584, 1728],\n",
       "          [1512, 1680, 1848, 2016],\n",
       "          [1728, 1920, 2112, 2304]]],\n",
       " \n",
       " \n",
       "        [[[ 810,  900,  990, 1080],\n",
       "          [ 945, 1050, 1155, 1260],\n",
       "          [1080, 1200, 1320, 1440]],\n",
       " \n",
       "         [[1080, 1200, 1320, 1440],\n",
       "          [1260, 1400, 1540, 1680],\n",
       "          [1440, 1600, 1760, 1920]],\n",
       " \n",
       "         [[1350, 1500, 1650, 1800],\n",
       "          [1575, 1750, 1925, 2100],\n",
       "          [1800, 2000, 2200, 2400]],\n",
       " \n",
       "         [[1620, 1800, 1980, 2160],\n",
       "          [1890, 2100, 2310, 2520],\n",
       "          [2160, 2400, 2640, 2880]]]]))"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.outer(ab, cd).reshape(5,4,3,4)\n",
    "x.shape, x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "10137d7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[[ 0,  1,  2,  3],\n",
       "         [ 4,  5,  6,  7],\n",
       "         [ 8,  9, 10, 11]],\n",
       " \n",
       "        [[12, 13, 14, 15],\n",
       "         [16, 17, 18, 19],\n",
       "         [20, 21, 22, 23]]]),\n",
       " array([0, 1, 2, 3, 4]))"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vml = np.arange(24).reshape(2,3,4)\n",
    "phi = np.arange(5)\n",
    "vml,phi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "0612c7a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 2, 3, 4)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vmlPhi = np.outer(phi,vml).reshape(5,2,3,4)\n",
    "vmlPhi.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "7a2d7654",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 2, 3, 8)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cb = np.concatenate([5*[vml], vmlPhi], axis=-1)\n",
    "cb.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "c8746881",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([16, 17, 18, 19, 16, 17, 18, 19])"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cb[1,1,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "4d32ac0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 2, 3, 8, 2, 3, 4)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cb.shape+vml.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "bdc09f85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = (1,2)\n",
    "b = [1,2]\n",
    "c = 1\n",
    "type(c) in [tuple, list]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "4e4903fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3],\n",
       "       [ 3, -1, 12]])"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([[1,2,3], [3,-1, 12]])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "9a4d8663",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 2])"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(a>0).sum(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "35036f9b",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[157], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m np\u001b[38;5;241m.\u001b[39many(a \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m a \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
     ]
    }
   ],
   "source": [
    "np.any(a == 0 or a == 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "05903485",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(1,2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "84ecaff5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 4, 5, 6]"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numPorts =7\n",
    "cbRiRestriction = \"11110110\"\n",
    "[r for r in range(numPorts) if cbRiRestriction[-1-r]=='1']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "8556f531",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'int' object is not iterable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[172], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'int' object is not iterable"
     ]
    }
   ],
   "source": [
    "list(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "e5831e84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((5, 4, 3),\n",
       " array([[[ 0.+0.j ,  4.+0.4j,  8.+0.8j],\n",
       "         [ 1.+0.1j,  5.+0.5j,  9.+0.9j],\n",
       "         [ 2.+0.2j,  6.+0.6j, 10.+1.j ],\n",
       "         [ 3.+0.3j,  7.+0.7j, 11.+1.1j]],\n",
       " \n",
       "        [[12.+1.2j, 16.+1.6j, 20.+2.j ],\n",
       "         [13.+1.3j, 17.+1.7j, 21.+2.1j],\n",
       "         [14.+1.4j, 18.+1.8j, 22.+2.2j],\n",
       "         [15.+1.5j, 19.+1.9j, 23.+2.3j]],\n",
       " \n",
       "        [[24.+2.4j, 28.+2.8j, 32.+3.2j],\n",
       "         [25.+2.5j, 29.+2.9j, 33.+3.3j],\n",
       "         [26.+2.6j, 30.+3.j , 34.+3.4j],\n",
       "         [27.+2.7j, 31.+3.1j, 35.+3.5j]],\n",
       " \n",
       "        [[36.+3.6j, 40.+4.j , 44.+4.4j],\n",
       "         [37.+3.7j, 41.+4.1j, 45.+4.5j],\n",
       "         [38.+3.8j, 42.+4.2j, 46.+4.6j],\n",
       "         [39.+3.9j, 43.+4.3j, 47.+4.7j]],\n",
       " \n",
       "        [[48.+4.8j, 52.+5.2j, 56.+5.6j],\n",
       "         [49.+4.9j, 53.+5.3j, 57.+5.7j],\n",
       "         [50.+5.j , 54.+5.4j, 58.+5.8j],\n",
       "         [51.+5.1j, 55.+5.5j, 59.+5.9j]]]))"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h = np.transpose(np.arange(60).reshape(5,3,4),(0,2,1))\n",
    "h = h+0.1j*h\n",
    "h.shape, h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "fa420802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((3, 2),\n",
       " array([[0.+0.j , 3.+0.3j],\n",
       "        [1.+0.1j, 4.+0.4j],\n",
       "        [2.+0.2j, 5.+0.5j]]))"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w = np.arange(6).reshape(2,3).T\n",
    "w = w +.1j*w\n",
    "w.shape, w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "41fbb238",
   "metadata": {},
   "outputs": [],
   "source": [
    "def getSINR(h, w, noiseVar):\n",
    "    # h: L x K x Nr x Nt  or n x Nr x Nt\n",
    "    # w: Nt x Nl   (Note that Nl<= min(Nr,Nt))\n",
    "    # Returns n x nl\n",
    "    h = h.reshape(-1, h.shape[-2], h.shape[-1])          # n x Nr x Nt   (n=L*K if h is 4D)\n",
    "    heff = np.matmul(h,w,axes=[(1,2),(0,1),(1,2)])       # n x Nr x Nl\n",
    "    u, s, vH = np.linalg.svd(heff, full_matrices=False)  # n x Nr x Nl , n x Nl, n x Nl x Nl\n",
    "    noisyInvS = 1/(np.square(s)+noiseVar)                # n x Nl\n",
    "    # Calculating (V . noisyInvS . VH) is the same as:\n",
    "    #  1) expanding dimensions of 'noisyInvS',  n x Nl =>                  n x Nl x 1\n",
    "    #  2) calculating V.VH witch is the same square of magnitude of V      n x Nl x Nl\n",
    "    #  3) doing elementwise multiplication (with boadcasting on last dim)  n x Nl x Nl\n",
    "    #  4) summing on second axis                                           n x Nl\n",
    "    gamma = 1/(noiseVar*(noisyInvS[:,:,None] * np.square(np.abs(vH))).sum(1)) - 1\n",
    "    return gamma.real         # n x Nl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "c3ecfb72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 37.99168153, 359.63323565],\n",
       "       [  4.56863075,  71.35297339],\n",
       "       [  1.70391124,  37.05619982],\n",
       "       [  0.904854  ,  26.78160181],\n",
       "       [  0.57413193,  22.42505049]])"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "getSINR(h, w, 0.1234)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "fb2ab82f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 37.99168153, 359.63323565],\n",
       "       [  4.56863075,  71.35297339],\n",
       "       [  1.70391124,  37.05619982],\n",
       "       [  0.904854  ,  26.78160181],\n",
       "       [  0.57413193,  22.42505049]])"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "getSINR(h, w, 0.1234)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "db1ed353",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2587114578.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[211], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    h = reshape(0:23,2,3,4);\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Matlab:\n",
    "nVar = 0.1234;\n",
    "h = reshape(0:59,4,3,5)+0.1i*reshape(0:59,4,3,5);\n",
    "w = reshape(0:5,3,2)+0.1i*reshape(0:5,3,2);\n",
    "r = pagemtimes(h,w);\n",
    "[~, sb, vb] = pagesvd(r,\"econ\",\"vector\");\n",
    "size(vb)\n",
    "size(sb)\n",
    "\n",
    "a1 = (1./(sb.^2+nVar));\n",
    "size(a1)\n",
    "a2 = 1./(nVar*squeeze(sum(pagetranspose(a1) .* (abs(vb) .^2), 2)));\n",
    "size(a2)\n",
    "sinr = real(a2-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "08b7b046",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 64, 244, 424, 604, 784],\n",
       "       [ 67, 256, 445, 634, 823]])"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = np.matmul(h,w,axes=[(1,2),(0,1),(1,2)])\n",
    "r[3,:,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "78f71a63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4, 2),\n",
       " array([[2.08694782e+02, 1.21976428e+00],\n",
       "        [6.72022958e+02, 3.78794263e-01],\n",
       "        [1.13746866e+03, 2.23793807e-01],\n",
       "        [1.60318900e+03, 1.58782552e-01]]),\n",
       " array([1.13746866e+03, 2.23793807e-01]),\n",
       " array([[4.35535122e+04, 1.48782490e+00],\n",
       "        [4.51614857e+05, 1.43485094e-01],\n",
       "        [1.29383495e+06, 5.00836679e-02],\n",
       "        [2.57021497e+06, 2.52118989e-02]]))"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u, s, vH = np.linalg.svd(r, full_matrices=False)\n",
    "s.shape, s, s[2,:], np.square(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "69417430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4, 2, 5),\n",
       " array([[[-0.07846033, -0.23394205, -0.38942377, -0.54490549,\n",
       "          -0.7003872 ],\n",
       "         [-0.77061273, -0.49524854, -0.21988435,  0.05547983,\n",
       "           0.33084402]],\n",
       " \n",
       "        [[-0.06215885, -0.22342462, -0.3846904 , -0.54595617,\n",
       "          -0.70722194],\n",
       "         [-0.77209862, -0.50008143, -0.22806424,  0.04395294,\n",
       "           0.31597013]],\n",
       " \n",
       "        [[-0.05908594, -0.22143288, -0.38377981, -0.54612675,\n",
       "          -0.70847368],\n",
       "         [-0.77233985, -0.50096655, -0.22959324,  0.04178007,\n",
       "           0.31315338]],\n",
       " \n",
       "        [[-0.0577943 , -0.22059482, -0.38339534, -0.54619585,\n",
       "          -0.70899637],\n",
       "         [-0.77243758, -0.50133614, -0.2302347 ,  0.04086674,\n",
       "           0.31196819]]]),\n",
       " array([-0.54490549, -0.54595617, -0.54612675, -0.54619585]))"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vH.shape, vH, vH[:,0,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "b2fa405a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hamidi\n",
      "shahab\n"
     ]
    }
   ],
   "source": [
    "def myFun(*argv):\n",
    "    argv = list(argv)[::-1]\n",
    "    for arg in argv:\n",
    "        print(arg)\n",
    "myFun(\"shahab\", \"hamidi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "id": "f90aed2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0 5 7\n",
      "0 0 5 8\n",
      "0 0 6 7\n",
      "0 0 6 8\n",
      "1 0 5 7\n",
      "1 0 5 8\n",
      "1 0 6 7\n",
      "1 0 6 8\n",
      "2 0 5 7\n",
      "2 0 5 8\n",
      "2 0 6 7\n",
      "2 0 6 8\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([5])"
      ]
     },
     "execution_count": 337,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def getCombs(*argv):\n",
    "    lists = []\n",
    "    for listI in argv[::-1]:\n",
    "        if type(listI)==list: lists += [listI]\n",
    "        else:                 lists += [list(range(listI))]\n",
    "            \n",
    "    lists = [lists[1]] + [lists[0]] + lists[2:]    \n",
    "    n = len(lists)\n",
    "    a = list(range(n-1,1,-1)) + [0,1]\n",
    "    return np.array(np.meshgrid(*lists)).T.reshape(-1,n)[:,a]\n",
    "\n",
    "combs = getCombs(3,1,[5,6],[7,8])\n",
    "for i,j,p,q in combs:\n",
    "    print(i,j,p,q)\n",
    "combs[0][2:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "56b46306",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[[[1, 1],\n",
       "          [1, 1]],\n",
       " \n",
       "         [[2, 2],\n",
       "          [2, 2]],\n",
       " \n",
       "         [[3, 3],\n",
       "          [3, 3]]],\n",
       " \n",
       " \n",
       "        [[[1, 1],\n",
       "          [1, 1]],\n",
       " \n",
       "         [[2, 2],\n",
       "          [2, 2]],\n",
       " \n",
       "         [[3, 3],\n",
       "          [3, 3]]]]),\n",
       " array([[[[4, 4],\n",
       "          [4, 4]],\n",
       " \n",
       "         [[4, 4],\n",
       "          [4, 4]],\n",
       " \n",
       "         [[4, 4],\n",
       "          [4, 4]]],\n",
       " \n",
       " \n",
       "        [[[5, 5],\n",
       "          [5, 5]],\n",
       " \n",
       "         [[5, 5],\n",
       "          [5, 5]],\n",
       " \n",
       "         [[5, 5],\n",
       "          [5, 5]]]]),\n",
       " array([[[[6, 6],\n",
       "          [7, 7]],\n",
       " \n",
       "         [[6, 6],\n",
       "          [7, 7]],\n",
       " \n",
       "         [[6, 6],\n",
       "          [7, 7]]],\n",
       " \n",
       " \n",
       "        [[[6, 6],\n",
       "          [7, 7]],\n",
       " \n",
       "         [[6, 6],\n",
       "          [7, 7]],\n",
       " \n",
       "         [[6, 6],\n",
       "          [7, 7]]]]),\n",
       " array([[[[8, 9],\n",
       "          [8, 9]],\n",
       " \n",
       "         [[8, 9],\n",
       "          [8, 9]],\n",
       " \n",
       "         [[8, 9],\n",
       "          [8, 9]]],\n",
       " \n",
       " \n",
       "        [[[8, 9],\n",
       "          [8, 9]],\n",
       " \n",
       "         [[8, 9],\n",
       "          [8, 9]],\n",
       " \n",
       "         [[8, 9],\n",
       "          [8, 9]]]])]"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.meshgrid([1, 2, 3], [4, 5], [6, 7], [8,9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48e422db",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from neoradium import Carrier, AntennaElement, AntennaPanel, CsiReport\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "abbae850",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1, 2], dtype=int16), 4)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "carrier = Carrier(startRb=0, numRbs=52, spacing=15)\n",
    "bwp = carrier.curBwp\n",
    "\n",
    "# Create an antenna panel using default antenna element template.\n",
    "txAntenna = AntennaPanel([1,2], polarization=\"x\")\n",
    "# txAntenna.showElements(zeroTicks=True)\n",
    "txAntenna.shape, txAntenna.getNumElements()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bbba3130",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type1SP codebookMode: 1 numLayers: 1\n",
      "32 indexes, codebook Shape: (32, 4, 1)\n",
      "Type1SP codebookMode: 1 numLayers: 2\n",
      "32 indexes, codebook Shape: (32, 4, 2)\n",
      "Type1SP codebookMode: 1 numLayers: 3\n",
      "16 indexes, codebook Shape: (16, 4, 3)\n",
      "Type1SP codebookMode: 1 numLayers: 4\n",
      "16 indexes, codebook Shape: (16, 4, 4)\n",
      "Type1SP codebookMode: 2 numLayers: 1\n",
      "64 indexes, codebook Shape: (64, 4, 1)\n",
      "Type1SP codebookMode: 2 numLayers: 2\n",
      "128 indexes, codebook Shape: (128, 4, 2)\n",
      "Type1SP codebookMode: 2 numLayers: 3\n",
      "16 indexes, codebook Shape: (16, 4, 3)\n",
      "Type1SP codebookMode: 2 numLayers: 4\n",
      "16 indexes, codebook Shape: (16, 4, 4)\n"
     ]
    }
   ],
   "source": [
    "for codebookType in [\"Type1SP\"]:\n",
    "    for codebookMode in [1,2]:\n",
    "        for numLayers in [1,2,3,4]:\n",
    "            csiReport = CsiReport(bwp=bwp, codebookType=codebookType, codebookMode=codebookMode, txAntenna=txAntenna)\n",
    "            indexes, codebook = csiReport.getCodebook(numLayers=numLayers)\n",
    "            print(codebookType, \"codebookMode:\", codebookMode, \"numLayers:\", numLayers)\n",
    "            print(len(indexes), \"indexes, codebook Shape:\", codebook.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b8be7664",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 1)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csiReport.n1, csiReport.n2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "97c3f3b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = '~'\n",
    "a in [True, '~']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e89bde9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
