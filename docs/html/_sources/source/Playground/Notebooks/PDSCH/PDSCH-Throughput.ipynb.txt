{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "feff33f0-f65b-4910-b170-0c8e9a463d92",
   "metadata": {},
   "source": [
    "# NR PDSCH Throughput with HARQ\n",
    "This notebook demonstrates how to measure the physical downlink shared channel (PDSCH) throughput of a 5G New Radio (NR) link, as specified in the 3GPP NR standard. It is similar to the MATLAB example [NR PDSCH Throughput](https://www.mathworks.com/help/5g/ug/nr-pdsch-throughput.html) and showcases the use of the following NeoRadium features:\n",
    "\n",
    "- Carrier and Bandwidth Part classes.\n",
    "- PDSCH and DMRS objects.\n",
    "- LDPC and HARQ capabilities.\n",
    "- CDL channel model and extraction of channel matrix and precoding matrix.\n",
    "- Resource grids, populating them, and applying channel models to them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "71f7bef5-356f-48a4-8fd5-c50e8e57ad80",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.io\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from neoradium import Carrier, PDSCH, CdlChannel, AntennaPanel, LdpcEncoder, random, HarqEntity, SnrScheduler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "011a24de-fc9b-436a-a350-c8656e1ec17f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Carrier Properties:\n",
      "  Cell Id:              1\n",
      "  Bandwidth Parts:      1\n",
      "  Active BWP:           0\n",
      "  Bandwidth Part 0:\n",
      "    Resource Blocks:    51 RBs starting at 0 (612 subcarriers)\n",
      "    Subcarrier Spacing: 30 kHz\n",
      "    CP Type:            normal\n",
      "    Bandwidth:          18.36 MHz\n",
      "    symbolsPerSlot:     14\n",
      "    slotsPerSubFrame:   2\n",
      "    nFFT:               1024\n",
      "    frameNo:            0\n",
      "    slotNo:             0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create a Carrier object with 51 resource blocks and 30KHz subcarrier spacing\n",
    "carrier = Carrier(numRbs=51, spacing=30)\n",
    "carrier.print()\n",
    "bwp = carrier.curBwp                      # The only bandwidth part in the carrier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "95516d14-f43f-49de-8d69-69f160ee27df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "PDSCH Properties:\n",
      "  mappingType: A\n",
      "  nID: 1\n",
      "  rnti: 1\n",
      "  numLayers: 2\n",
      "  numCodewords: 1\n",
      "  modulation: 16QAM\n",
      "  portSet: [0, 1]\n",
      "  symSet:   0   1   2   3   4   5   6   7   8   9  10  11  12  13\n",
      "  prbSet:   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19\n",
      "           20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39\n",
      "           40  41  42  43  44  45  46  47  48  49  50\n",
      "  interleavingBundleSize: 0\n",
      "  PRG Size: Wideband\n",
      "  Bandwidth Part:\n",
      "    Resource Blocks:    51 RBs starting at 0 (612 subcarriers)\n",
      "    Subcarrier Spacing: 30 kHz\n",
      "    CP Type:            normal\n",
      "    Bandwidth:          18.36 MHz\n",
      "    symbolsPerSlot:     14\n",
      "    slotsPerSubFrame:   2\n",
      "    nFFT:               1024\n",
      "    frameNo:            0\n",
      "    slotNo:             0\n",
      "  DMRS:\n",
      "    configType: 2\n",
      "    nIDs: []\n",
      "    scID: 0\n",
      "    sameSeq: 1\n",
      "    symbols: Single\n",
      "    typeA1stPos: 2\n",
      "    additionalPos: 2\n",
      "    cdmGroups: [0, 0]\n",
      "    deltaShifts: [0, 0]\n",
      "    allCdmGroups: [0]\n",
      "    symSet: [ 2  7 11]\n",
      "    REs (before shift): [0, 1, 6, 7]\n",
      "    epreRatioDb: 0 (dB)\n",
      "\n",
      "\n",
      "HARQ Entity Properties:\n",
      "  HARQ Type:            IR\n",
      "  Num. Processes:       16\n",
      "  Num. Codewords:       1\n",
      "  RV sequence:          [0, 2, 3, 1]\n",
      "  maxTries:             4\n",
      "  Encoder:\n",
      "    Base Graph:         1\n",
      "    Modulation:         16QAM\n",
      "    Number of layers:   2\n",
      "    Target Rate:        0.478515625\n",
      "  Decoder:\n",
      "    Base Graph:         1\n",
      "    Modulation:         16QAM\n",
      "    Number of layers:   2\n",
      "\n",
      "\n",
      "CDL-C Channel Properties:\n",
      "  carrierFreq:          4 GHz\n",
      "  normalizeGains:       True\n",
      "  normalizeOutput:      True\n",
      "  txDir:                Downlink\n",
      "  filterLen:            16 samples\n",
      "  delayQuantSize:       64\n",
      "  stopBandAtten:        80 dB\n",
      "  dopplerShift:         5 Hz\n",
      "  coherenceTime:        84.628 milliseconds\n",
      "  delaySpread:          300 ns\n",
      "  ueDirAZ:              0.0°, 90.0°\n",
      "  Cross Pol. Power:     7 dB\n",
      "  angleSpreads:         2° 15° 3° 7°\n",
      "  TX Antenna:\n",
      "    Total Elements:     8\n",
      "    spacing:            0.5𝜆, 0.5𝜆\n",
      "    shape:              1 rows x 4 columns\n",
      "    polarization:       x\n",
      "  RX Antenna:\n",
      "    Total Elements:     2\n",
      "    spacing:            0.5𝜆, 0.5𝜆\n",
      "    shape:              1 rows x 1 columns\n",
      "    polarization:       +\n",
      "  hasLOS:               False\n",
      "  NLOS Paths (24):\n",
      "    Delays (ns):        0.000 62.97 66.57 69.87 65.28 190.9 193.4 196.8 197.5 238.0 246.3 280.0\n",
      "                        368.5 392.4 651.1 813.1 1277. 1380. 1647. 1682. 1891. 1991. 2112. 2595.\n",
      "    Powers (dB):        -4.40 -1.20 -3.50 -5.20 -2.50 0.000 -2.20 -3.90 -7.40 -7.10 -10.7 -11.1\n",
      "                        -5.10 -6.80 -8.70 -13.2 -13.9 -13.9 -15.8 -17.1 -16.0 -15.7 -21.6 -22.8\n",
      "    AODs (Deg):         -47  -23  -23  -23  -41  0    0    0    73   -64  80   -97 \n",
      "                        -55  -64  -78  103  99   89   -102 92   93   107  119  -124\n",
      "    AOAs (Deg):         -101 120  120  120  -128 170  170  170  55   66   -48  47  \n",
      "                        68   -69  82   31   -16  4    -14  10   6    1    -22  34  \n",
      "    ZODs (Deg):         97   99   99   99   101  99   99   99   105  95   106  94  \n",
      "                        104  104  93   104  95   93   92   107  93   93   105  108 \n",
      "    ZOAs (Deg):         88   72   72   72   70   75   75   75   67   64   71   60  \n",
      "                        91   60   61   101  62   67   53   62   52   62   58   57  \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Initialize the modulation and code rate.\n",
    "modulation = '16QAM'\n",
    "codeRate = 490/1024\n",
    "\n",
    "# Create a PDSCH onject with 2 tramsmission layers\n",
    "pdsch = PDSCH(bwp, interleavingBundleSize=0, numLayers=2, nID=carrier.cellId)\n",
    "pdsch.setDMRS(prgSize=0, configType=2, additionalPos=2, otherCdmGroups=[])\n",
    "pdsch.print()\n",
    "\n",
    "# Create an LDPC encoder object using base graph 1 and passing modulation and code rate settings\n",
    "ldpcEncoder = LdpcEncoder(baseGraphNo=1,  modulation=modulation, txLayers=pdsch.numLayers, targetRate=codeRate)\n",
    "\n",
    "# HARQ configuration:\n",
    "harqType = \"IR\"                                     # \"IR\" -> \"Incremental Redundancy\", \"CC\" -> \"Chase Combining\"\n",
    "numProc = 16                                        # Number of HARQ processes\n",
    "harq = HarqEntity(ldpcEncoder, harqType, numProc)   # Create the HARQ entity\n",
    "harq.print()\n",
    "\n",
    "# Create the CDL channel model\n",
    "channel = CdlChannel(bwp, 'C', delaySpread=300, carrierFreq=4e9, dopplerShift=5,\n",
    "                     txAntenna = AntennaPanel([1,4], polarization=\"x\"),                         # 8 TX antenna\n",
    "                     rxAntenna = AntennaPanel([1,1], polarization=\"+\", beamWidth=[75,360]),     # 2 RX antenna, Omni-directional\n",
    "                     rxOrientation = [0,0,0])                                                   # Default is [180,0,0]\n",
    "print(channel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "42548089-5319-4d3a-863b-093806422101",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SNR(dB)  Tx Bits     Rx Bits     Throughput(%)  TX Blocks  RX Blocks  BLER(%)  Retry Mean  time(Sec.)\n",
      "-------  ----------  ----------  -------------  ---------  ---------  -------  ----------  ----------\n",
      "6        30216000    3263328     10.80          1000       108        89.20    3.54        158.70    \n",
      "5        30216000    423024      1.40           1000       14         98.60    3.94        158.07    \n",
      "4        30216000    0           0.00           1000       0          100.00   4.00        159.37    \n",
      "3        30216000    0           0.00           1000       0          100.00   4.00        159.64    \n",
      "7        30216000    5166936     17.10          1000       171        82.90    3.03        161.71    \n",
      "8        30216000    6738168     22.30          1000       223        77.70    2.61        167.97    \n",
      "9        30216000    8218752     27.20          1000       272        72.80    2.19        173.80    \n",
      "10       30216000    10756896    35.60          1000       356        64.40    1.62        178.26    \n",
      "11       30216000    12751152    42.20          1000       422        57.80    1.33        184.86    \n",
      "12       30216000    13566984    44.90          1000       449        55.10    1.20        188.20    \n",
      "13       30216000    15198648    50.30          1000       503        49.70    0.98        194.23    \n",
      "14       30216000    18099384    59.90          1000       599        40.10    0.67        204.43    \n",
      "15       30216000    22208760    73.50          1000       735        26.50    0.36        222.47    \n",
      "16       30216000    24777120    82.00          1000       820        18.00    0.22        231.26    \n",
      "17       30216000    26499432    87.70          1000       877        12.30    0.14        238.67    \n",
      "18       30216000    27345480    90.50          1000       905        9.50     0.10        241.45    \n",
      "19       30216000    28644768    94.80          1000       948        5.20     0.05        246.40    \n",
      "20       30216000    29792976    98.60          1000       986        1.40     0.01        251.06    \n",
      "21       30216000    30095136    99.60          1000       996        0.40     0.00        252.46    \n",
      "22       30216000    30216000    100.00         1000       1000       0.00     0.00        252.83    \n",
      "23       30216000    30216000    100.00         1000       1000       0.00     0.00        252.05    \n"
     ]
    }
   ],
   "source": [
    "# Print header lines:\n",
    "print(\"SNR(dB)  Tx Bits     Rx Bits     Throughput(%)  TX Blocks  RX Blocks  BLER(%)  Retry Mean  time(Sec.)\")\n",
    "print(\"-------  ----------  ----------  -------------  ---------  ---------  -------  ----------  ----------\")\n",
    "\n",
    "snrScheduler = SnrScheduler(6,1, loSnrVal=0, hiSnrVal=100)      # Start at 6 dB, use increments of 0.2 dB\n",
    "numSlots = 1000                                                 # The number of slots transmitted for each SNR value\n",
    "for snrDb in snrScheduler:\n",
    "    random.setSeed(123)\n",
    "    channel.restart()                                           # Reset the channel and the bandwidth part associated with it\n",
    "    harq.reset()                                                # Reset HARQ state and buffers\n",
    "\n",
    "    t0 = time.time()                                            # Start the timer\n",
    "    for s in range(numSlots):                                   # The inner loop doing 'numSlot' transmissions\n",
    "        grid = bwp.createGrid(pdsch.numLayers)                  # Create a resource grid with 2 layers\n",
    "        pdsch.allocateResources(grid)                           # Allocat PDSCH resources including DMRS\n",
    "        txBlockSizes = pdsch.getTxBlockSize(codeRate)           # Calculate the Transport Block Size (TBS)\n",
    "        numBits = pdsch.getBitSizes(grid)                       # Total number of PDSCH data bits available in the resource grid\n",
    "\n",
    "        # Preparing the transport blocks\n",
    "        txBlocks = []                                           # Transport blocks, one per codeword.\n",
    "        for c in range(harq.numCW):\n",
    "            if harq.needNewData[c]:                             # New transmission.\n",
    "                txBlocks += [ random.bits(txBlockSizes[c]) ]    # Create random bits for new transmissions\n",
    "            else:                                               # Retransmission\n",
    "                txBlocks += [ None ]                            # Set transport block to None to indicate a retransmission\n",
    "\n",
    "        # The following function returns a coded, rate-matched bitstream, ready for transmission/retransmission\n",
    "        rateMatchedCodeBlocks = harq.getRateMatchedCodeBlocks(txBlocks, numBits)    \n",
    "        \n",
    "        pdsch.populateGrid(grid, rateMatchedCodeBlocks)         # Map/modulate the data to the resource grid\n",
    "        \n",
    "        channelMatrix = channel.getChannelMatrix()              # Get channel matrix (Assuming perfect channel estimation)\n",
    "        precoder = pdsch.getPrecodingMatrix(channelMatrix)      # Get precoding matrix based on the channel matrix\n",
    "        \n",
    "        precodedGrid = grid.precode(precoder)                   # Perform precoding\n",
    "        \n",
    "        rxGrid = precodedGrid.applyChannel(channelMatrix)       # Apply the channel to the precoded resource (Freq. domain)\n",
    "        noisyRxGrid = rxGrid.addNoise(snrDb=snrDb, useRxPower=True) # Add noise (Using RX power to calcualte Noise Power)\n",
    "\n",
    "        # Calculate the channel matrix with the precoding effect. This is assuming perfect channel estimation. For practical\n",
    "        # channel estimation we can use the DMRS reference signals and use the \"estimateChannelLS\" method of resource grid object.\n",
    "        precodingChannelMatrix = channelMatrix @ precoder[None,...]\n",
    "\n",
    "        # Use the channel matrix (with precoding effect) to equalize the received resource grid\n",
    "        eqGrid, llrScales = noisyRxGrid.equalize(precodingChannelMatrix)\n",
    "\n",
    "        # Demodulate the equalized resource grid (eqGrid) to get the Log-Likelihood values\n",
    "        llrs = pdsch.getLLRsFromGrid(eqGrid, pdsch.dataIndices, llrScales) \n",
    "\n",
    "        # Use HARQ entity to decode the LLRs to transport blocks\n",
    "        decodedTxBlocks, blockErrors = harq.decodeLLRs(llrs, txBlockSizes, numIter=2)\n",
    "\n",
    "        # Get the statistics from HARQ entity and print them:\n",
    "        print(\"\\r%-7d  %-10d  %-10d  %-13.2f  %-9d  %-9d  %-7.2f  %-10.2f  %-10.2f\"\n",
    "              %(snrDb, harq.totalTxBits, harq.totalRxBits, harq.throughput, harq.totalTxBlocks, \n",
    "                harq.totalRxBlocks, harq.bler, harq.meanTries, time.time()-t0), end='')\n",
    "    \n",
    "        channel.goNext()\n",
    "        harq.goNext()\n",
    "    \n",
    "    snrScheduler.setData(harq.throughput)\n",
    "    print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "692be182-a20c-49c3-8da1-63f98e496c4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Draw the throughput graph:\n",
    "snrDbs, throughputs = snrScheduler.getSnrsAndData()\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(snrDbs, throughputs)\n",
    "plt.title(\"PDSCH throughput at different SNR values\");\n",
    "plt.grid()\n",
    "plt.xlabel(\"SNR (dB)\")\n",
    "plt.xticks(snrDbs)\n",
    "plt.ylabel(\"Throughput (%)\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
