{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e298fec6",
   "metadata": {},
   "source": [
    "# Creating temporally and spatially consistent sequences of channel matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5f66e9e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from neoradium import DeepMimoData, TrjChannel, Carrier, AntennaPanel, random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "249b4e11-b76f-4923-96cd-f2630e56136e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "DeepMimoData Properties:\n",
      "  Scenario:                   asu_campus_3p5\n",
      "  Version:                    4.0.0a3\n",
      "  UE Grid:                    rx_grid\n",
      "  Grid Size:                  411 x 321\n",
      "  Base Station:               BS (at [166. 104.  22.])\n",
      "  Total Grid Points:          131,931\n",
      "  UE Spacing:                 [1. 1.]\n",
      "  UE bounds (xyMin, xyMax)    [-225.55 -160.17], [184.45 159.83]\n",
      "  UE Height:                  1.50\n",
      "  Carrier Frequency:          3.5 GHz\n",
      "  Num. paths (Min, Avg, Max): 0, 6.21, 10\n",
      "  Num. total blockage:        46774\n",
      "  LOS percentage:             19.71%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Replace this with the folder on your computer where you store DeepMIMO scenarios\n",
    "dataFolder = \"/data/RayTracing/DeepMIMO/Scenarios/V4/\"\n",
    "DeepMimoData.setScenariosPath(dataFolder)\n",
    "\n",
    "# Create a DeepMimoData object\n",
    "deepMimoData = DeepMimoData(\"asu_campus_3p5\")\n",
    "deepMimoData.print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2b1f9c5c-a538-4b29-a955-019c2df856c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Trajectory Properties:\n",
      "  start (x,y,z):         (-164.55, 39.83, 1.50)\n",
      "  No. of points:         201752\n",
      "  curIdx:                0 (0.00%)\n",
      "  curSpeed:              [0.85 0.85 0.  ]\n",
      "  Total distance:        242.08 meters\n",
      "  Total time:            201.751 seconds\n",
      "  Average Speed:         1.200 mps\n",
      "  Carrier Frequency:     3.5 GHz\n",
      "  Paths (Min, Avg, Max): 1, 8.97, 10\n",
      "  Totally blocked:       0\n",
      "  LOS percentage:        32.84%\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Figure size 742.518x471.734 with 1 Axes>,\n",
       " <Axes: title={'center': 'Map of LOS/NLOS paths'}, xlabel='X', ylabel='Y'>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 742.518x471.734 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "random.setSeed(123)                                 # Make results reproducible\n",
    "\n",
    "# Create the carrier:\n",
    "carrier = Carrier(startRb=0, numRbs=25, spacing=15) # Carrier with 25 Resource Blocks, 15KHz subcarrier spacing\n",
    "bwp = carrier.curBwp                                # The only bandwidth part in the carrier\n",
    "\n",
    "# Create a random trajectory at waking speed.\n",
    "trajectory = deepMimoData.getRandomTrajectory(xyBounds=np.array([[-210, 40], [-120, 100]]),   # Traj. bounds\n",
    "                                              segLen=5,               # Num grid points on shortest segment\n",
    "                                              bwp=bwp,                # The bandwidth part\n",
    "                                              trajLen=200,            # Number of grid points on trajectory\n",
    "                                              speedMps=1.2)           # Speed in mps (Walking)\n",
    "\n",
    "trajectory.print()                                  # Print the trajectory information\n",
    "deepMimoData.drawMap(\"LOS-NLOS\", trajectory)        # Draw the Map with the trajectory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f681eaeb-557a-4578-87dc-a235b463f294",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "TrjChannel Properties:\n",
      "  carrierFreq:          3.5 GHz\n",
      "  normalizeGains:       True\n",
      "  normalizeOutput:      True\n",
      "  normalizeDelays:      True\n",
      "  xPolPower:            10.00 (db)\n",
      "  filterLen:            16 samples\n",
      "  delayQuantSize:       64\n",
      "  stopBandAtten:        80 db\n",
      "  dopplerShift:         14.015298117569412 Hz\n",
      "  coherenceTime:        0.030191451092315417 Sec.\n",
      "  TX Antenna:\n",
      "    Total Elements:     16\n",
      "    spacing:            0.5𝜆, 0.5𝜆\n",
      "    shape:              2 rows x 4 columns\n",
      "    polarization:       x\n",
      "  RX Antenna:\n",
      "    Total Elements:     4\n",
      "    spacing:            0.5𝜆, 0.5𝜆\n",
      "    shape:              1 rows x 2 columns\n",
      "    polarization:       x\n",
      "    Orientation (𝛼,𝛃,𝛄): 0° 0° 0°\n",
      "  Trajectory:\n",
      "    start (x,y,z):         (-164.55, 39.83, 1.50)\n",
      "    No. of points:         201752\n",
      "    curIdx:                0 (0.00%)\n",
      "    curSpeed:              [0.85 0.85 0.  ]\n",
      "    Total distance:        242.08 meters\n",
      "    Total time:            201.751 seconds\n",
      "    Average Speed:         1.200 mps\n",
      "    Carrier Frequency:     3.5 GHz\n",
      "    Paths (Min, Avg, Max): 1, 8.97, 10\n",
      "    Totally blocked:       0\n",
      "    LOS percentage:        32.84%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create a MIMO channel model based on our trajectory.\n",
    "channel = TrjChannel(bwp, trajectory,\n",
    "                     txAntenna = AntennaPanel([2,4], polarization=\"x\"),       # 8 TX antenna\n",
    "                     txOrientation = [180,0,0],                               # Facing to the left\n",
    "                     rxAntenna = AntennaPanel([1,2], polarization=\"x\"))       # 2 RX antenna\n",
    "print(channel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "464acb0f-5969-4967-b3c1-5947f2ad8f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now create a sequence generator that generates up to 20 sequences with sequences\n",
    "# of length 10, containing every other slot.\n",
    "\n",
    "# Trajectory Points:         0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ...\n",
    "# Channels in the sequence:  0   1   2   3   4   5     6     7     8     9     0     1  ...\n",
    "# Sequence Number:           0   0   0   0   0   0     0     0     0     0     1     1  ...\n",
    "chanSeqGen = channel.getChanSeqGen(seqPeriod=2, seqLen=10, maxNumSeq=20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "712c6b11-cb2b-4e28-99d2-1ce842fa5a9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Sequence 0: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 1: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 2: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 3: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 4: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 5: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 6: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 7: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 8: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 9: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 10: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 11: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 12: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 13: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 14: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 15: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 16: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 17: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 18: (10, 14, 300, 4, 16)\n",
      "Shape of Sequence 19: (10, 14, 300, 4, 16)\n"
     ]
    }
   ],
   "source": [
    "chanSeqGen.reset()\n",
    "for i, chanSeq in enumerate(chanSeqGen):\n",
    "    print(f\"Shape of Sequence {i}: {chanSeq.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0963723b-1106-4588-b3f7-88fb41eb1278",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
