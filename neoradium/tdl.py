# Copyright (c) 2024 InterDigital AI Lab
"""
This module implements the :py:class:`~neoradium.tdl.TdlChannel` class, which encapsulates the functionality of the 
Tapped Delay Line (TDL) channel model
"""
# **********************************************************************************************************************
# Revision History:
# Date Changed  By                      Description
# ------------  --------------------    --------------------------------------------------------------------------------
# 06/05/2023    Shahab Hamidi-Rad       First version of the file.
# 11/30/2023    Shahab                  Completed the documentation
# 04/01/2025    Shahab                  Restructured the file to work with the new ChannelModel class
# 06/20/2025    Shahab                  Updated the restart method with the new parameter "applyToBwp".
# **********************************************************************************************************************
import numpy as np
from scipy.linalg import sqrtm
from scipy import signal

from .channelmodel import ChannelModel
from .utils import getMultiLineStr, toLinear, toDb, freqStr

# **********************************************************************************************************************
# This file is based on:
#       TR 38.901 V17.0.0 (2022-03)
#       TS 38.101-4 V17.4.0 (2022-03)
#       TS 38.104 V17.4.0 (2021-12)

# **********************************************************************************************************************
tapInfo = {
                'A':   # TR 38.901 - Table 7.7.2-1 TDL-A
                   # Normalized Delay      Power In dB       Tap Number #
                   [[0.0,                    -13.4       ],    #   1
                    [0.3819,                 0           ],    #   2
                    [0.4025,                 -2.2        ],    #   3
                    [0.5868,                 -4          ],    #   4
                    [0.4610,                 -6          ],    #   5
                    [0.5375,                 -8.2        ],    #   6
                    [0.6708,                 -9.9        ],    #   7
                    [0.5750,                 -10.5       ],    #   8
                    [0.7618,                 -7.5        ],    #   9
                    [1.5375,                 -15.9       ],    #   10
                    [1.8978,                 -6.6        ],    #   11
                    [2.2242,                 -16.7       ],    #   12
                    [2.1718,                 -12.4       ],    #   13
                    [2.4942,                 -15.2       ],    #   14
                    [2.5119,                 -10.8       ],    #   15
                    [3.0582,                 -11.3       ],    #   16
                    [4.0810,                 -12.7       ],    #   17
                    [4.4579,                 -16.2       ],    #   18
                    [4.5695,                 -18.3       ],    #   19
                    [4.7966,                 -18.9       ],    #   20
                    [5.0066,                 -16.6       ],    #   21
                    [5.3043,                 -19.9       ],    #   22
                    [9.6586,                 -29.7       ]],   #   23

                'B':   # TR 38.901 - Table 7.7.2-2 TDL-B
                   # Normalized Delay      Power In dB       Tap Number #
                   [[0.0,                    0           ],    #   1
                    [0.1072,                 -2.2        ],    #   2
                    [0.2155,                 -4          ],    #   3
                    [0.2095,                 -3.2        ],    #   4
                    [0.2870,                 -9.8        ],    #   5
                    [0.2986,                 -1.2        ],    #   6
                    [0.3752,                 -3.4        ],    #   7
                    [0.5055,                 -5.2        ],    #   8
                    [0.3681,                 -7.6        ],    #   9
                    [0.3697,                 -3          ],    #   10
                    [0.5700,                 -8.9        ],    #   11
                    [0.5283,                 -9          ],    #   12
                    [1.1021,                 -4.8        ],    #   13
                    [1.2756,                 -5.7        ],    #   14
                    [1.5474,                 -7.5        ],    #   15
                    [1.7842,                 -1.9        ],    #   16
                    [2.0169,                 -7.6        ],    #   17
                    [2.8294,                 -12.2       ],    #   18
                    [3.0219,                 -9.8        ],    #   19
                    [3.6187,                 -11.4       ],    #   20
                    [4.1067,                 -14.9       ],    #   21
                    [4.2790,                 -9.2        ],    #   22
                    [4.7834,                 -11.3       ]],   #   23
                     
                'C':   # TR 38.901 - Table 7.7.2-3 TDL-C
                   # Normalized Delay      Power In dB       Tap Number #
                   [[0.0  ,                  -4.4        ],    #   1
                    [0.2099,                 -1.2        ],    #   2
                    [0.2219,                 -3.5        ],    #   3
                    [0.2329,                 -5.2        ],    #   4
                    [0.2176,                 -2.5        ],    #   5
                    [0.6366,                 0           ],    #   6
                    [0.6448,                 -2.2        ],    #   7
                    [0.6560,                 -3.9        ],    #   8
                    [0.6584,                 -7.4        ],    #   9
                    [0.7935,                 -7.1        ],    #   10
                    [0.8213,                 -10.7       ],    #   11
                    [0.9336,                 -11.1       ],    #   12
                    [1.2285,                 -5.1        ],    #   13
                    [1.3083,                 -6.8        ],    #   14
                    [2.1704,                 -8.7        ],    #   15
                    [2.7105,                 -13.2       ],    #   16
                    [4.2589,                 -13.9       ],    #   17
                    [4.6003,                 -13.9       ],    #   18
                    [5.4902,                 -15.8       ],    #   19
                    [5.6077,                 -17.1       ],    #   20
                    [6.3065,                 -16         ],    #   21
                    [6.6374,                 -15.7       ],    #   22
                    [7.0427,                 -21.6       ],    #   23
                    [8.6523,                 -22.8       ]],   #   24
                     
                'D':   # TR 38.901 - Table 7.7.2-4 TDL-D
                   # Normalized Delay      Power In dB       Tap Number #
                   [[0.0  ,                  -0.2        ],    #   1 (LOS)
                    [0.0  ,                  -13.5       ],    #   1
                    [0.035,                  -18.8       ],    #   2
                    [0.612,                  -21         ],    #   3
                    [1.363,                  -22.8       ],    #   4
                    [1.405,                  -17.9       ],    #   5
                    [1.804,                  -20.1       ],    #   6
                    [2.596,                  -21.9       ],    #   7
                    [1.775,                  -22.9       ],    #   8
                    [4.042,                  -27.8       ],    #   9
                    [7.937,                  -23.6       ],    #   10
                    [9.424,                  -24.8       ],    #   11
                    [9.708,                  -30.0       ],    #   12
                    [12.525,                 -27.7       ]],   #   13
                        
                'E':   # TR 38.901 - Table 7.7.2-5 TDL-E
                   # Normalized Delay      Power In dB       Tap Number #
                   [[0.0,                    -0.03       ],    #   1 (LOS)
                    [0.0,                    -22.03      ],    #   1
                    [0.5133,                 -15.8       ],    #   2
                    [0.5440,                 -18.1       ],    #   3
                    [0.5630,                 -19.8       ],    #   4
                    [0.5440,                 -22.9       ],    #   5
                    [0.7112,                 -22.4       ],    #   6
                    [1.9092,                 -18.6       ],    #   7
                    [1.9293,                 -20.8       ],    #   8
                    [1.9589,                 -22.6       ],    #   9
                    [2.6426,                 -22.3       ],    #   10
                    [3.7136,                 -25.6       ],    #   11
                    [5.4524,                 -20.2       ],    #   12
                    [12.0034,                -29.8       ],    #   13
                    [20.6519,                -29.2       ]],   #   14
                     
                'A30': # TS 38.101-4 V17.4.0 (2022-03) - Table B.2.1.1-2 and Table B.2.1.2-2
                   # Delay (ns)            Power In dB       Tap Number #
                   [[0,                      -15.5       ],    #   1
                    [10,                     0           ],    #   2
                    [15,                     -5.1        ],    #   3
                    [20,                     -5.1        ],    #   4
                    [25,                     -9.6        ],    #   5
                    [50,                     -8.2        ],    #   6
                    [65,                     -13.1       ],    #   7
                    [75,                     -11.5       ],    #   8
                    [105,                    -11.0       ],    #   9
                    [135,                    -16.2       ],    #   10
                    [150,                    -16.6       ],    #   11
                    [290,                    -26.2       ]],   #   12
                
                'B100':# TS 38.101-4 V17.4.0 (2022-03) - Table B.2.1.1-3
                   # Delay (ns)            Power In dB       Tap Number #
                   [[0,                      0           ],    #   1
                    [10,                     -2.2        ],    #   2
                    [20,                     -0.6        ],    #   3
                    [30,                     -0.6        ],    #   4
                    [35,                     -0.3        ],    #   5
                    [45,                     -1.2        ],    #   6
                    [55,                     -5.9        ],    #   7
                    [120,                    -2.2        ],    #   8
                    [170,                    -0.8        ],    #   9
                    [245,                    -6.3        ],    #   10
                    [330,                    -7.5        ],    #   11
                    [480,                    -7.1        ]],   #   12

                'C60': # TS 38.101-4 V17.4.0 (2022-03) - Table B.2.1.2-3
                   # Delay (ns)            Power In dB       Tap Number #
                   [[0,                      -7.8        ],    #   1
                    [15,                     -0.3        ],    #   2
                    [40,                     0           ],    #   3
                    [50,                     -8.9        ],    #   4
                    [55,                     -14.5       ],    #   5
                    [75,                     -8.5        ],    #   6
                    [80,                     -10.2       ],    #   7
                    [130,                    -12.1       ],    #   8
                    [210,                    -13.9       ],    #   9
                    [300,                    -15.2       ],    #   10
                    [360,                    -16.9       ],    #   11
                    [520,                    -19.4       ]],   #   12
                    
                'C300':# TS 38.101-4 V17.4.0 (2022-03) - Table B.2.1.1-4
                   # Delay (ns)            Power In dB       Tap Number #
                   [[0,                      -6.9        ],    #   1
                    [65,                     0           ],    #   2
                    [70,                     -7.7        ],    #   3
                    [190,                    -2.5        ],    #   4
                    [195,                    -2.4        ],    #   5
                    [200,                    -9.9        ],    #   6
                    [240,                    -8.0        ],    #   7
                    [325,                    -6.6        ],    #   8
                    [520,                    -7.1        ],    #   9
                    [1045,                   -13.0       ],    #   10
                    [1510,                   -14.2       ],    #   11
                    [2595,                   -16.0       ]],   #   12
                    
                'D30': # TS 38.101-4 V17.4.0 (2022-03) - Table B.2.1.2-4
                   # Delay (ns)            Power In dB       Tap Number #
                   [[0,                      -0.2        ],    #   1 (LOS)
                    [0,                      -12.4       ],    #   1
                    [20,                     -21         ],    #   2
                    [40,                     -16.7       ],    #   3
                    [55,                     -18.3       ],    #   4
                    [80,                     -21.9       ],    #   5
                    [120,                    -27.8       ],    #   6
                    [240,                    -23.6       ],    #   7
                    [285,                    -24.8       ],    #   8
                    [290,                    -30.0       ],    #   9
                    [375,                    -27.6       ]],   #   10
          }

# **********************************************************************************************************************
# Pre-calculated correlation matrices:
# This for Downlink/Uplink, CoPolar/CrossPolar, High/Medium/MediumA/Low, with different antenna configs
# Currently this is only used for unit testing.
preCalcMatrix = {
        'Downlink': { # For Downlink Antenna Config is:  ng x nu (nt x nr)
            'CoPolar':  {
                'High':     {   # Downlink - CoPolar - High => TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.1.2-2
                            '1x2':[[ 1,   0.9 ],
                                   [ 0.9, 1   ]],
                            '2x1':[[ 1,   0.9 ],
                                   [ 0.9, 1   ]],
                            '2x2':[[ 1,    0.9,  0.9,  0.81 ],
                                   [ 0.9,  1,    0.81, 0.9  ],
                                   [ 0.9,  0.81, 1,    0.9  ],
                                   [ 0.81, 0.9,  0.9,  1    ]],
                            '4x2':[[ 1.0000, 0.8999, 0.9883, 0.8894, 0.9542, 0.8587, 0.8999, 0.8099 ],
                                   [ 0.8999, 1.0000, 0.8894, 0.9883, 0.8587, 0.9542, 0.8099, 0.8999 ],
                                   [ 0.9883, 0.8894, 1.0000, 0.8999, 0.9883, 0.8894, 0.9542, 0.8587 ],
                                   [ 0.8894, 0.9883, 0.8999, 1.0000, 0.8894, 0.9883, 0.8587, 0.9542 ],
                                   [ 0.9542, 0.8587, 0.9883, 0.8894, 1.0000, 0.8999, 0.9883, 0.8894 ],
                                   [ 0.8587, 0.9542, 0.8894, 0.9883, 0.8999, 1.0000, 0.8894, 0.9883 ],
                                   [ 0.8999, 0.8099, 0.9542, 0.8587, 0.9883, 0.8894, 1.0000, 0.8999 ],
                                   [ 0.8099, 0.8999, 0.8587, 0.9542, 0.8894, 0.9883, 0.8999, 1.0000 ]],
                            '4x4':[[ 1.0000, 0.9882, 0.9541, 0.8999, 0.9882, 0.9767, 0.9430, 0.8894,
                                     0.9541, 0.9430, 0.9105, 0.8587, 0.8999, 0.8894, 0.8587, 0.8099 ],
                                   [ 0.9882, 1.0000, 0.9882, 0.9541, 0.9767, 0.9882, 0.9767, 0.9430,
                                     0.9430, 0.9541, 0.9430, 0.9105, 0.8894, 0.8999, 0.8894, 0.8587 ],
                                   [ 0.9541, 0.9882, 1.0000, 0.9882, 0.9430, 0.9767, 0.9882, 0.9767,
                                     0.9105, 0.9430, 0.9541, 0.9430, 0.8587, 0.8894, 0.8999, 0.8894 ],
                                   [ 0.8999, 0.9541, 0.9882, 1.0000, 0.8894, 0.9430, 0.9767, 0.9882,
                                     0.8587, 0.9105, 0.9430, 0.9541, 0.8099, 0.8587, 0.8894, 0.8999 ],
                                   [ 0.9882, 0.9767, 0.9430, 0.8894, 1.0000, 0.9882, 0.9541, 0.8999,
                                     0.9882, 0.9767, 0.9430, 0.8894, 0.9541, 0.9430, 0.9105, 0.8587 ],
                                   [ 0.9767, 0.9882, 0.9767, 0.9430, 0.9882, 1.0000, 0.9882, 0.9541,
                                     0.9767, 0.9882, 0.9767, 0.9430, 0.9430, 0.9541, 0.9430, 0.9105 ],
                                   [ 0.9430, 0.9767, 0.9882, 0.9767, 0.9541, 0.9882, 1.0000, 0.9882,
                                     0.9430, 0.9767, 0.9882, 0.9767, 0.9105, 0.9430, 0.9541, 0.9430 ],
                                   [ 0.8894, 0.9430, 0.9767, 0.9882, 0.8999, 0.9541, 0.9882, 1.0000,
                                     0.8894, 0.9430, 0.9767, 0.9882, 0.8587, 0.9105, 0.9430, 0.9541 ],
                                   [ 0.9541, 0.9430, 0.9105, 0.8587, 0.9882, 0.9767, 0.9430, 0.8894,
                                     1.0000, 0.9882, 0.9541, 0.8999, 0.9882, 0.9767, 0.9430, 0.8894 ],
                                   [ 0.9430, 0.9541, 0.9430, 0.9105, 0.9767, 0.9882, 0.9767, 0.9430,
                                     0.9882, 1.0000, 0.9882, 0.9541, 0.9767, 0.9882, 0.9767, 0.9430 ],
                                   [ 0.9105, 0.9430, 0.9541, 0.9430, 0.9430, 0.9767, 0.9882, 0.9767,
                                     0.9541, 0.9882, 1.0000, 0.9882, 0.9430, 0.9767, 0.9882, 0.9767 ],
                                   [ 0.8587, 0.9105, 0.9430, 0.9541, 0.8894, 0.9430, 0.9767, 0.9882,
                                     0.8999, 0.9541, 0.9882, 1.0000, 0.8894, 0.9430, 0.9767, 0.9882 ],
                                   [ 0.8999, 0.8894, 0.8587, 0.8099, 0.9541, 0.9430, 0.9105, 0.8587,
                                     0.9882, 0.9767, 0.9430, 0.8894, 1.0000, 0.9882, 0.9541, 0.8999 ],
                                   [ 0.8894, 0.8999, 0.8894, 0.8587, 0.9430, 0.9541, 0.9430, 0.9105,
                                     0.9767, 0.9882, 0.9767, 0.9430, 0.9882, 1.0000, 0.9882, 0.9541 ],
                                   [ 0.8587, 0.8894, 0.8999, 0.8894, 0.9105, 0.9430, 0.9541, 0.9430,
                                     0.9430, 0.9767, 0.9882, 0.9767, 0.9541, 0.9882, 1.0000, 0.9882 ],
                                   [ 0.8099, 0.8587, 0.8894, 0.8999, 0.8587, 0.9105, 0.9430, 0.9541,
                                     0.8894, 0.9430, 0.9767, 0.9882, 0.8999, 0.9541, 0.9882, 1.0000 ]]
                            },
                'Medium':   {   # Downlink - CoPolar - Medium => TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.1.2-3
                            '2x2':[[ 1,    0.9,  0.3,  0.27 ],
                                   [ 0.9,  1,    0.27, 0.3  ],
                                   [ 0.3,  0.27, 1,    0.9  ],
                                   [ 0.27, 0.3,  0.9,  1    ]],
                            '2x4':[[ 1.0000, 0.9882, 0.9541, 0.8999, 0.3000, 0.2965, 0.2862, 0.2700 ],  # Note: This case is slightly different from the
                                   [ 0.9882, 1.0000, 0.9882, 0.9541, 0.2965, 0.3000, 0.2965, 0.2862 ],  #       calculated matrix. Looks like it was calculated with
                                   [ 0.9541, 0.9882, 1.0000, 0.9882, 0.2862, 0.2965, 0.3000, 0.2965 ],  #       a=0.00012 instead of a=0.0001 which is specified in
                                   [ 0.8999, 0.9541, 0.9882, 1.0000, 0.2700, 0.2862, 0.2965, 0.3000 ],  #       TS 38.101-4 V17.4.0 (2022-03), Section B.2.3.2
                                   [ 0.3000, 0.2965, 0.2862, 0.2700, 1.0000, 0.9882, 0.9541, 0.8999 ],
                                   [ 0.2965, 0.3000, 0.2965, 0.2862, 0.9882, 1.0000, 0.9882, 0.9541 ],
                                   [ 0.2862, 0.2965, 0.3000, 0.2965, 0.9541, 0.9882, 1.0000, 0.9882 ],
                                   [ 0.2700, 0.2862, 0.2965, 0.3000, 0.8999, 0.9541, 0.9882, 1.0000 ]],
                            '4x2':[[ 1.0000, 0.9000, 0.8748, 0.7873, 0.5856, 0.5271, 0.3000, 0.2700 ],
                                   [ 0.9000, 1.0000, 0.7873, 0.8748, 0.5271, 0.5856, 0.2700, 0.3000 ],
                                   [ 0.8748, 0.7873, 1.0000, 0.9000, 0.8748, 0.7873, 0.5856, 0.5271 ],
                                   [ 0.7873, 0.8748, 0.9000, 1.0000, 0.7873, 0.8748, 0.5271, 0.5856 ],
                                   [ 0.5856, 0.5271, 0.8748, 0.7873, 1.0000, 0.9000, 0.8748, 0.7873 ],
                                   [ 0.5271, 0.5856, 0.7873, 0.8748, 0.9000, 1.0000, 0.7873, 0.8748 ],
                                   [ 0.3000, 0.2700, 0.5856, 0.5271, 0.8748, 0.7873, 1.0000, 0.9000 ],
                                   [ 0.2700, 0.3000, 0.5271, 0.5856, 0.7873, 0.8748, 0.9000, 1.0000 ]],
                            '4x4':[[ 1.0000, 0.9882, 0.9541, 0.8999, 0.8747, 0.8645, 0.8347, 0.7872,
                                     0.5855, 0.5787, 0.5588, 0.5270, 0.3000, 0.2965, 0.2862, 0.2700 ],
                                   [ 0.9882, 1.0000, 0.9882, 0.9541, 0.8645, 0.8747, 0.8645, 0.8347,
                                     0.5787, 0.5855, 0.5787, 0.5588, 0.2965, 0.3000, 0.2965, 0.2862 ],
                                   [ 0.9541, 0.9882, 1.0000, 0.9882, 0.8347, 0.8645, 0.8747, 0.8645,
                                     0.5588, 0.5787, 0.5855, 0.5787, 0.2862, 0.2965, 0.3000, 0.2965 ],
                                   [ 0.8999, 0.9541, 0.9882, 1.0000, 0.7872, 0.8347, 0.8645, 0.8747,
                                     0.5270, 0.5588, 0.5787, 0.5855, 0.2700, 0.2862, 0.2965, 0.3000 ],
                                   [ 0.8747, 0.8645, 0.8347, 0.7872, 1.0000, 0.9882, 0.9541, 0.8999,
                                     0.8747, 0.8645, 0.8347, 0.7872, 0.5855, 0.5787, 0.5588, 0.5270 ],
                                   [ 0.8645, 0.8747, 0.8645, 0.8347, 0.9882, 1.0000, 0.9882, 0.9541,
                                     0.8645, 0.8747, 0.8645, 0.8347, 0.5787, 0.5855, 0.5787, 0.5588 ],
                                   [ 0.8347, 0.8645, 0.8747, 0.8645, 0.9541, 0.9882, 1.0000, 0.9882,
                                     0.8347, 0.8645, 0.8747, 0.8645, 0.5588, 0.5787, 0.5855, 0.5787 ],
                                   [ 0.7872, 0.8347, 0.8645, 0.8747, 0.8999, 0.9541, 0.9882, 1.0000,
                                     0.7872, 0.8347, 0.8645, 0.8747, 0.5270, 0.5588, 0.5787, 0.5855 ],
                                   [ 0.5855, 0.5787, 0.5588, 0.5270, 0.8747, 0.8645, 0.8347, 0.7872,
                                     1.0000, 0.9882, 0.9541, 0.8999, 0.8747, 0.8645, 0.8347, 0.7872 ],
                                   [ 0.5787, 0.5855, 0.5787, 0.5588, 0.8645, 0.8747, 0.8645, 0.8347,
                                     0.9882, 1.0000, 0.9882, 0.9541, 0.8645, 0.8747, 0.8645, 0.8347 ],
                                   [ 0.5588, 0.5787, 0.5855, 0.5787, 0.8347, 0.8645, 0.8747, 0.8645,
                                     0.9541, 0.9882, 1.0000, 0.9882, 0.8347, 0.8645, 0.8747, 0.8645 ],
                                   [ 0.5270, 0.5588, 0.5787, 0.5855, 0.7872, 0.8347, 0.8645, 0.8747,
                                     0.8999, 0.9541, 0.9882, 1.0000, 0.7872, 0.8347, 0.8645, 0.8747 ],
                                   [ 0.3000, 0.2965, 0.2862, 0.2700, 0.5855, 0.5787, 0.5588, 0.5270,
                                     0.8747, 0.8645, 0.8347, 0.7872, 1.0000, 0.9882, 0.9541, 0.8999 ],
                                   [ 0.2965, 0.3000, 0.2965, 0.2862, 0.5787, 0.5855, 0.5787, 0.5588,
                                     0.8645, 0.8747, 0.8645, 0.8347, 0.9882, 1.0000, 0.9882, 0.9541 ],
                                   [ 0.2862, 0.2965, 0.3000, 0.2965, 0.5588, 0.5787, 0.5855, 0.5787,
                                     0.8347, 0.8645, 0.8747, 0.8645, 0.9541, 0.9882, 1.0000, 0.9882 ],
                                   [ 0.2700, 0.2862, 0.2965, 0.3000, 0.5270, 0.5588, 0.5787, 0.5855,
                                     0.7872, 0.8347, 0.8645, 0.8747, 0.8999, 0.9541, 0.9882, 1.0000 ]]
                            },
                'MediumA':  {   # Downlink - CoPolar - MediumA => TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.1.2-4
                            '1x4':[[ 1,      0.9,    0.6561, 0.3874 ],
                                   [ 0.9,    1,      0.9,    0.6561 ],
                                   [ 0.6561, 0.9,    1,      0.9    ],
                                   [ 0.3874, 0.6561, 0.9,    1      ]],
                            '2x4':[[ 1.0000, 0.9000, 0.6561, 0.3874, 0.3000, 0.2700, 0.1968, 0.1162 ],
                                   [ 0.9000, 1.0000, 0.9000, 0.6561, 0.2700, 0.3000, 0.2700, 0.1968 ],
                                   [ 0.6561, 0.9000, 1.0000, 0.9000, 0.1968, 0.2700, 0.3000, 0.2700 ],
                                   [ 0.3874, 0.6561, 0.9000, 1.0000, 0.1162, 0.1968, 0.2700, 0.3000 ],
                                   [ 0.3000, 0.2700, 0.1968, 0.1162, 1.0000, 0.9000, 0.6561, 0.3874 ],
                                   [ 0.2700, 0.3000, 0.2700, 0.1968, 0.9000, 1.0000, 0.9000, 0.6561 ],
                                   [ 0.1968, 0.2700, 0.3000, 0.2700, 0.6561, 0.9000, 1.0000, 0.9000 ],
                                   [ 0.1162, 0.1968, 0.2700, 0.3000, 0.3874, 0.6561, 0.9000, 1.0000 ]],
                            '4x4':[[ 1.0000, 0.9000, 0.6561, 0.3874, 0.8748, 0.7873, 0.5739, 0.3389,
                                     0.5856, 0.5270, 0.3842, 0.2269, 0.3000, 0.2700, 0.1968, 0.1162 ],
                                   [ 0.9000, 1.0000, 0.9000, 0.6561, 0.7873, 0.8748, 0.7873, 0.5739,
                                     0.5270, 0.5856, 0.5270, 0.3842, 0.2700, 0.3000, 0.2700, 0.1968 ],
                                   [ 0.6561, 0.9000, 1.0000, 0.9000, 0.5739, 0.7873, 0.8748, 0.7873,
                                     0.3842, 0.5270, 0.5856, 0.5270, 0.1968, 0.2700, 0.3000, 0.2700 ],
                                   [ 0.3874, 0.6561, 0.9000, 1.0000, 0.3389, 0.5739, 0.7873, 0.8748,
                                     0.2269, 0.3842, 0.5270, 0.5856, 0.1162, 0.1968, 0.2700, 0.3000 ],
                                   [ 0.8748, 0.7873, 0.5739, 0.3389, 1.0000, 0.9000, 0.6561, 0.3874,
                                     0.8748, 0.7873, 0.5739, 0.3389, 0.5856, 0.5270, 0.3842, 0.2269 ],
                                   [ 0.7873, 0.8748, 0.7873, 0.5739, 0.9000, 1.0000, 0.9000, 0.6561,
                                     0.7873, 0.8748, 0.7873, 0.5739, 0.5270, 0.5856, 0.5270, 0.3842 ],
                                   [ 0.5739, 0.7873, 0.8748, 0.7873, 0.6561, 0.9000, 1.0000, 0.9000,
                                     0.5739, 0.7873, 0.8748, 0.7873, 0.3842, 0.5270, 0.5856, 0.5270 ],
                                   [ 0.3389, 0.5739, 0.7873, 0.8748, 0.3874, 0.6561, 0.9000, 1.0000,
                                     0.3389, 0.5739, 0.7873, 0.8748, 0.2269, 0.3842, 0.5270, 0.5856 ],
                                   [ 0.5856, 0.5270, 0.3842, 0.2269, 0.8748, 0.7873, 0.5739, 0.3389,
                                     1.0000, 0.9000, 0.6561, 0.3874, 0.8748, 0.7873, 0.5739, 0.3389 ],
                                   [ 0.5270, 0.5856, 0.5270, 0.3842, 0.7873, 0.8748, 0.7873, 0.5739,
                                     0.9000, 1.0000, 0.9000, 0.6561, 0.7873, 0.8748, 0.7873, 0.5739 ],
                                   [ 0.3842, 0.5270, 0.5856, 0.5270, 0.5739, 0.7873, 0.8748, 0.7873,
                                     0.6561, 0.9000, 1.0000, 0.9000, 0.5739, 0.7873, 0.8748, 0.7873 ],
                                   [ 0.2269, 0.3842, 0.5270, 0.5856, 0.3389, 0.5739, 0.7873, 0.8748,
                                     0.3874, 0.6561, 0.9000, 1.0000, 0.3389, 0.5739, 0.7873, 0.8748 ],
                                   [ 0.3000, 0.2700, 0.1968, 0.1162, 0.5856, 0.5270, 0.3842, 0.2269,
                                     0.8748, 0.7873, 0.5739, 0.3389, 1.0000, 0.9000, 0.6561, 0.3874 ],
                                   [ 0.2700, 0.3000, 0.2700, 0.1968, 0.5270, 0.5856, 0.5270, 0.3842,
                                     0.7873, 0.8748, 0.7873, 0.5739, 0.9000, 1.0000, 0.9000, 0.6561 ],
                                   [ 0.1968, 0.2700, 0.3000, 0.2700, 0.3842, 0.5270, 0.5856, 0.5270,
                                     0.5739, 0.7873, 0.8748, 0.7873, 0.6561, 0.9000, 1.0000, 0.9000 ],
                                   [ 0.1162, 0.1968, 0.2700, 0.3000, 0.2269, 0.3842, 0.5270, 0.5856,
                                     0.3389, 0.5739, 0.7873, 0.8748, 0.3874, 0.6561, 0.9000, 1.0000 ]]
                            },
                'Low':      {   # Downlink - CoPolar - Low => TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.1.2-5
                                # Note that returning a Scalar value means an identity matrix of the specified size
                            '1x2': 2,
                            '1x4': 4,
                            '2x1': 2,
                            '2x2': 4,
                            '2x4': 8,
                            '4x1': 4,
                            '4x2': 8,
                            '4x4': 16
                            }
                        },
            'CrossPolar':{
                'High':     {   # Downlink - CrossPolar - High => TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.2.2-2
                            '4x2':[[  1.0000, 0.0000,  0.9000, 0.0000, -0.3000, 0.0000, -0.2700, 0.0000 ],
                                   [  0.0000, 1.0000,  0.0000, 0.9000,  0.0000, 0.3000,  0.0000, 0.2700 ],
                                   [  0.9000, 0.0000,  1.0000, 0.0000, -0.2700, 0.0000, -0.3000, 0.0000 ],
                                   [  0.0000, 0.9000,  0.0000, 1.0000,  0.0000, 0.2700,  0.0000, 0.3000 ],
                                   [ -0.3000, 0.0000, -0.2700, 0.0000,  1.0000, 0.0000,  0.9000, 0.0000 ],
                                   [  0.0000, 0.3000,  0.0000, 0.2700,  0.0000, 1.0000,  0.0000, 0.9000 ],
                                   [ -0.2700, 0.0000, -0.3000, 0.0000,  0.9000, 0.0000,  1.0000, 0.0000 ],
                                   [  0.0000, 0.2700,  0.0000, 0.3000,  0.0000, 0.9000,  0.0000, 1.0000 ]],
                            '2x4':[[ 1.  ,  0.9 ,  0.  ,  0.  , -0.3 , -0.27,  0.  ,  0.  ],
                                   [ 0.9 ,  1.  ,  0.  ,  0.  , -0.27, -0.3 ,  0.  ,  0.  ],
                                   [ 0.  ,  0.  ,  1.  ,  0.9 ,  0.  ,  0.  ,  0.3 ,  0.27],
                                   [ 0.  ,  0.  ,  0.9 ,  1.  ,  0.  ,  0.  ,  0.27,  0.3 ],
                                   [-0.3 , -0.27,  0.  ,  0.  ,  1.  ,  0.9 ,  0.  ,  0.  ],
                                   [-0.27, -0.3 ,  0.  ,  0.  ,  0.9 ,  1.  ,  0.  ,  0.  ],
                                   [ 0.  ,  0.  ,  0.3 ,  0.27,  0.  ,  0.  ,  1.  ,  0.9 ],
                                   [ 0.  ,  0.  ,  0.27,  0.3 ,  0.  ,  0.  ,  0.9 ,  1.  ]],
                            '4x4':[[ 1.   ,  0.9  ,  0.   ,  0.   ,  0.9  ,  0.81 ,  0.   ,  0.   ,
                                    -0.3  , -0.27 ,  0.   ,  0.   , -0.27 , -0.243,  0.   ,  0.   ],
                                   [ 0.9  ,  1.   ,  0.   ,  0.   ,  0.81 ,  0.9  ,  0.   ,  0.   ,
                                    -0.27 , -0.3  ,  0.   ,  0.   , -0.243, -0.27 ,  0.   ,  0.   ],
                                   [ 0.   ,  0.   ,  1.   ,  0.9  ,  0.   ,  0.   ,  0.9  ,  0.81 ,
                                     0.   ,  0.   ,  0.3  ,  0.27 ,  0.   ,  0.   ,  0.27 ,  0.243],
                                   [ 0.   ,  0.   ,  0.9  ,  1.   ,  0.   ,  0.   ,  0.81 ,  0.9  ,
                                     0.   ,  0.   ,  0.27 ,  0.3  ,  0.   ,  0.   ,  0.243,  0.27 ],
                                   [ 0.9  ,  0.81 ,  0.   ,  0.   ,  1.   ,  0.9  ,  0.   ,  0.   ,
                                    -0.27 , -0.243,  0.   ,  0.   , -0.3  , -0.27 ,  0.   ,  0.   ],
                                   [ 0.81 ,  0.9  ,  0.   ,  0.   ,  0.9  ,  1.   ,  0.   ,  0.   ,
                                    -0.243, -0.27 ,  0.   ,  0.   , -0.27 , -0.3  ,  0.   ,  0.   ],
                                   [ 0.   ,  0.   ,  0.9  ,  0.81 ,  0.   ,  0.   ,  1.   ,  0.9  ,
                                     0.   ,  0.   ,  0.27 ,  0.243,  0.   ,  0.   ,  0.3  ,  0.27 ],
                                   [ 0.   ,  0.   ,  0.81 ,  0.9  ,  0.   ,  0.   ,  0.9  ,  1.   ,
                                     0.   ,  0.   ,  0.243,  0.27 ,  0.   ,  0.   ,  0.27 ,  0.3  ],
                                   [-0.3  , -0.27 ,  0.   ,  0.   , -0.27 , -0.243,  0.   ,  0.   ,
                                     1.   ,  0.9  ,  0.   ,  0.   ,  0.9  ,  0.81 ,  0.   ,  0.   ],
                                   [-0.27 , -0.3  ,  0.   ,  0.   , -0.243, -0.27 ,  0.   ,  0.   ,
                                     0.9  ,  1.   ,  0.   ,  0.   ,  0.81 ,  0.9  ,  0.   ,  0.   ],
                                   [ 0.   ,  0.   ,  0.3  ,  0.27 ,  0.   ,  0.   ,  0.27 ,  0.243,
                                     0.   ,  0.   ,  1.   ,  0.9  ,  0.   ,  0.   ,  0.9  ,  0.81 ],
                                   [ 0.   ,  0.   ,  0.27 ,  0.3  ,  0.   ,  0.   ,  0.243,  0.27 ,
                                     0.   ,  0.   ,  0.9  ,  1.   ,  0.   ,  0.   ,  0.81 ,  0.9  ],
                                   [-0.27 , -0.243,  0.   ,  0.   , -0.3  , -0.27 ,  0.   ,  0.   ,
                                     0.9  ,  0.81 ,  0.   ,  0.   ,  1.   ,  0.9  ,  0.   ,  0.   ],
                                   [-0.243, -0.27 ,  0.   ,  0.   , -0.27 , -0.3  ,  0.   ,  0.   ,
                                     0.81 ,  0.9  ,  0.   ,  0.   ,  0.9  ,  1.   ,  0.   ,  0.   ],
                                   [ 0.   ,  0.   ,  0.27 ,  0.243,  0.   ,  0.   ,  0.3  ,  0.27 ,
                                     0.   ,  0.   ,  0.9  ,  0.81 ,  0.   ,  0.   ,  1.   ,  0.9  ],
                                   [ 0.   ,  0.   ,  0.243,  0.27 ,  0.   ,  0.   ,  0.27 ,  0.3  ,
                                     0.   ,  0.   ,  0.81 ,  0.9  ,  0.   ,  0.   ,  0.9  ,  1.   ]],
                            '8x2':[[  1.0000, 0.0000,  0.9883, 0.0000,  0.9542, 0.0000,  0.8999, 0.0000,
                                     -0.3000, 0.0000, -0.2965, 0.0000, -0.2862, 0.0000, -0.2700, 0.0000 ],
                                   [  0.0000, 1.0000,  0.0000, 0.9883,  0.0000, 0.9542,  0.0000, 0.8999,
                                      0.0000, 0.3000,  0.0000, 0.2965,  0.0000, 0.2862,  0.0000, 0.2700 ],
                                   [  0.9883, 0.0000,  1.0000, 0.0000,  0.9883, 0.0000,  0.9542, 0.0000,
                                     -0.2965, 0.0000, -0.3000, 0.0000, -0.2965, 0.0000, -0.2862, 0.0000 ],
                                   [  0.0000, 0.9883,  0.0000, 1.0000,  0.0000, 0.9883,  0.0000, 0.9542,
                                      0.0000, 0.2965,  0.0000, 0.3000,  0.0000, 0.2965,  0.0000, 0.2862 ],
                                   [  0.9542, 0.0000,  0.9883, 0.0000,  1.0000, 0.0000,  0.9883, 0.0000,
                                     -0.2862, 0.0000, -0.2965, 0.0000, -0.3000, 0.0000, -0.2965, 0.0000 ],
                                   [  0.0000, 0.9542,  0.0000, 0.9883,  0.0000, 1.0000,  0.0000, 0.9883,
                                      0.0000, 0.2862,  0.0000, 0.2965,  0.0000, 0.3000,  0.0000, 0.2965 ],
                                   [  0.8999, 0.0000,  0.9542, 0.0000,  0.9883, 0.0000,  1.0000, 0.0000,
                                     -0.2700, 0.0000, -0.2862, 0.0000, -0.2965, 0.0000, -0.3000, 0.0000 ],
                                   [  0.0000, 0.8999,  0.0000, 0.9542,  0.0000, 0.9883,  0.0000, 1.0000,
                                      0.0000, 0.2700,  0.0000, 0.2862,  0.0000, 0.2965,  0.0000, 0.3000 ],
                                   [ -0.3000, 0.0000, -0.2965, 0.0000, -0.2862, 0.0000, -0.2700, 0.0000,
                                      1.0000, 0.0000,  0.9883, 0.0000,  0.9542, 0.0000,  0.8999, 0.0000 ],
                                   [  0.0000, 0.3000,  0.0000, 0.2965,  0.0000, 0.2862,  0.0000, 0.2700,
                                      0.0000, 1.0000,  0.0000, 0.9883,  0.0000, 0.9542,  0.0000, 0.8999 ],
                                   [ -0.2965, 0.0000, -0.3000, 0.0000, -0.2965, 0.0000, -0.2862, 0.0000,
                                      0.9883, 0.0000,  1.0000, 0.0000,  0.9883, 0.0000,  0.9542, 0.0000 ],
                                   [  0.0000, 0.2965,  0.0000, 0.3000,  0.0000, 0.2965,  0.0000, 0.2862,
                                      0.0000, 0.9883,  0.0000, 1.0000,  0.0000, 0.9883,  0.0000, 0.9542 ],
                                   [ -0.2862, 0.0000, -0.2965, 0.0000, -0.3000, 0.0000, -0.2965, 0.0000,
                                      0.9542, 0.0000,  0.9883, 0.0000,  1.0000, 0.0000,  0.9883, 0.0000 ],
                                   [  0.0000, 0.2862,  0.0000, 0.2965,  0.0000, 0.3000,  0.0000, 0.2965,
                                      0.0000, 0.9542,  0.0000, 0.9883,  0.0000, 1.0000,  0.0000, 0.9883 ],
                                   [ -0.2700, 0.0000, -0.2862, 0.0000, -0.2965, 0.0000, -0.3000, 0.0000,
                                      0.8999, 0.0000,  0.9542, 0.0000,  0.9883, 0.0000,  1.0000, 0.0000 ],
                                   [  0.0000, 0.2700,  0.0000, 0.2862,  0.0000, 0.2965,  0.0000, 0.3000,
                                      0.0000, 0.8999,  0.0000, 0.9542,  0.0000, 0.9883,  0.0000, 1.0000 ]]
                            },
                'Medium':   {   # Downlink - CrossPolar - MediumA => TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.2.2-3
                            '2x2':[[ 1.0,  0.0, -0.2, 0.0 ],
                                   [ 0.0,  1.0,  0.0, 0.2 ],
                                   [ -0.2, 0.0,  1.0, 0.0 ],
                                   [ 0.0,  0.2,  0.0, 1.0 ]],
                            '4x4':[[  1.0000,  0.6000, 0.0000, 0.0000,  0.3000,  0.1800, 0.0000, 0.0000,
                                      -0.2000, -0.1200, 0.0000, 0.0000, -0.0600, -0.0360, 0.0000, 0.0000 ],
                                   [  0.6000,  1.0000, 0.0000, 0.0000,  0.1800,  0.3000, 0.0000, 0.0000,
                                     -0.1200, -0.2000, 0.0000, 0.0000, -0.0360, -0.0600, 0.0000, 0.0000 ],
                                   [  0.0000,  0.0000, 1.0000, 0.6000,  0.0000,  0.0000, 0.3000, 0.1800,
                                      0.0000,  0.0000, 0.2000, 0.1200,  0.0000,  0.0000, 0.0600, 0.0360 ],
                                   [  0.0000,  0.0000, 0.6000, 1.0000,  0.0000,  0.0000, 0.1800, 0.3000,
                                      0.0000,  0.0000, 0.1200, 0.2000,  0.0000,  0.0000, 0.0360, 0.0600 ],
                                   [  0.3000,  0.1800, 0.0000, 0.0000,  1.0000,  0.6000, 0.0000, 0.0000,
                                     -0.0600, -0.0360, 0.0000, 0.0000, -0.2000, -0.1200, 0.0000, 0.0000 ],
                                   [  0.1800,  0.3000, 0.0000, 0.0000,  0.6000,  1.0000, 0.0000, 0.0000,
                                     -0.0360, -0.0600, 0.0000, 0.0000, -0.1200, -0.2000, 0.0000, 0.0000 ],
                                   [  0.0000,  0.0000, 0.3000, 0.1800,  0.0000,  0.0000, 1.0000, 0.6000,
                                      0.0000,  0.0000, 0.0600, 0.0360,  0.0000,  0.0000, 0.2000, 0.1200 ],
                                   [  0.0000,  0.0000, 0.1800, 0.3000,  0.0000,  0.0000, 0.6000, 1.0000,
                                      0.0000,  0.0000, 0.0360, 0.0600,  0.0000,  0.0000, 0.1200, 0.2000 ],
                                   [ -0.2000, -0.1200, 0.0000, 0.0000, -0.0600, -0.0360, 0.0000, 0.0000,
                                      1.0000,  0.6000, 0.0000, 0.0000,  0.3000,  0.1800, 0.0000, 0.0000 ],
                                   [ -0.1200, -0.2000, 0.0000, 0.0000, -0.0360, -0.0600, 0.0000, 0.0000,
                                      0.6000,  1.0000, 0.0000, 0.0000,  0.1800,  0.3000, 0.0000, 0.0000 ],
                                   [  0.0000,  0.0000, 0.2000, 0.1200,  0.0000,  0.0000, 0.0600, 0.0360,
                                      0.0000,  0.0000, 1.0000, 0.6000,  0.0000,  0.0000, 0.3000, 0.1800 ],
                                   [  0.0000,  0.0000, 0.1200, 0.2000,  0.0000,  0.0000, 0.0360, 0.0600,
                                      0.0000,  0.0000, 0.6000, 1.0000,  0.0000,  0.0000, 0.1800, 0.3000 ],
                                   [ -0.0600, -0.0360, 0.0000, 0.0000, -0.2000, -0.1200, 0.0000, 0.0000,
                                      0.3000,  0.1800, 0.0000, 0.0000,  1.0000,  0.6000, 0.0000, 0.0000 ],
                                   [ -0.0360, -0.0600, 0.0000, 0.0000, -0.1200, -0.2000, 0.0000, 0.0000,
                                      0.1800,  0.3000, 0.0000, 0.0000,  0.6000,  1.0000, 0.0000, 0.0000 ],
                                   [  0.0000,  0.0000, 0.0600, 0.0360,  0.0000,  0.0000, 0.2000, 0.1200,
                                      0.0000,  0.0000, 0.3000, 0.1800,  0.0000,  0.0000, 1.0000, 0.6000 ],
                                   [  0.0000,  0.0000, 0.0360, 0.0600,  0.0000,  0.0000, 0.1200, 0.2000,
                                      0.0000,  0.0000, 0.1800, 0.3000,  0.0000,  0.0000, 0.6000, 1.0000 ]]
                            }
                        }
                    },
        'Uplink':   {   # For Uplink Antenna Config is:  nu x ng  (nt x nr)
            'CoPolar':  {
                'High':     {   # Uplink - CoPolar - High => TS 38.104 V17.4.0 (2021-12), Table G.2.3.1.2-2
                            '1x2':[[ 1,   0.9 ],
                                   [ 0.9, 1   ]],
                            '2x2':[[ 1,    0.9,  0.9,  0.81 ],
                                   [ 0.9,  1,    0.81, 0.9  ],
                                   [ 0.9,  0.81, 1,    0.9  ],
                                   [ 0.81, 0.9,  0.9,  1    ]],
                            '2x4':[[ 1.0000, 0.9883, 0.9542, 0.8999, 0.8999, 0.8894, 0.8587, 0.8099 ],
                                   [ 0.9883, 1.0000, 0.9883, 0.9542, 0.8894, 0.8999, 0.8894, 0.8587 ],
                                   [ 0.9542, 0.9883, 1.0000, 0.9883, 0.8587, 0.8894, 0.8999, 0.8894 ],
                                   [ 0.8999, 0.9542, 0.9883, 1.0000, 0.8099, 0.8587, 0.8894, 0.8999 ],
                                   [ 0.8999, 0.8894, 0.8587, 0.8099, 1.0000, 0.9883, 0.9542, 0.8999 ],
                                   [ 0.8894, 0.8999, 0.8894, 0.8587, 0.9883, 1.0000, 0.9883, 0.9542 ],
                                   [ 0.8587, 0.8894, 0.8999, 0.8894, 0.9542, 0.9883, 1.0000, 0.9883 ],
                                   [ 0.8099, 0.8587, 0.8894, 0.8999, 0.8999, 0.9542, 0.9883, 1.0000 ]],
                            '4x4':[[ 1.0000, 0.9882, 0.9541, 0.8999, 0.9882, 0.9767, 0.9430, 0.8894,
                                     0.9541, 0.9430, 0.9105, 0.8587, 0.8999, 0.8894, 0.8587, 0.8099 ],
                                   [ 0.9882, 1.0000, 0.9882, 0.9541, 0.9767, 0.9882, 0.9767, 0.9430,
                                     0.9430, 0.9541, 0.9430, 0.9105, 0.8894, 0.8999, 0.8894, 0.8587 ],
                                   [ 0.9541, 0.9882, 1.0000, 0.9882, 0.9430, 0.9767, 0.9882, 0.9767,
                                     0.9105, 0.9430, 0.9541, 0.9430, 0.8587, 0.8894, 0.8999, 0.8894 ],
                                   [ 0.8999, 0.9541, 0.9882, 1.0000, 0.8894, 0.9430, 0.9767, 0.9882,
                                     0.8587, 0.9105, 0.9430, 0.9541, 0.8099, 0.8587, 0.8894, 0.8999 ],
                                   [ 0.9882, 0.9767, 0.9430, 0.8894, 1.0000, 0.9882, 0.9541, 0.8999,
                                     0.9882, 0.9767, 0.9430, 0.8894, 0.9541, 0.9430, 0.9105, 0.8587 ],
                                   [ 0.9767, 0.9882, 0.9767, 0.9430, 0.9882, 1.0000, 0.9882, 0.9541,
                                     0.9767, 0.9882, 0.9767, 0.9430, 0.9430, 0.9541, 0.9430, 0.9105 ],
                                   [ 0.9430, 0.9767, 0.9882, 0.9767, 0.9541, 0.9882, 1.0000, 0.9882,
                                     0.9430, 0.9767, 0.9882, 0.9767, 0.9105, 0.9430, 0.9541, 0.9430 ],
                                   [ 0.8894, 0.9430, 0.9767, 0.9882, 0.8999, 0.9541, 0.9882, 1.0000,
                                     0.8894, 0.9430, 0.9767, 0.9882, 0.8587, 0.9105, 0.9430, 0.9541 ],
                                   [ 0.9541, 0.9430, 0.9105, 0.8587, 0.9882, 0.9767, 0.9430, 0.8894,
                                     1.0000, 0.9882, 0.9541, 0.8999, 0.9882, 0.9767, 0.9430, 0.8894 ],
                                   [ 0.9430, 0.9541, 0.9430, 0.9105, 0.9767, 0.9882, 0.9767, 0.9430,
                                     0.9882, 1.0000, 0.9882, 0.9541, 0.9767, 0.9882, 0.9767, 0.9430 ],
                                   [ 0.9105, 0.9430, 0.9541, 0.9430, 0.9430, 0.9767, 0.9882, 0.9767,
                                     0.9541, 0.9882, 1.0000, 0.9882, 0.9430, 0.9767, 0.9882, 0.9767 ],
                                   [ 0.8587, 0.9105, 0.9430, 0.9541, 0.8894, 0.9430, 0.9767, 0.9882,
                                     0.8999, 0.9541, 0.9882, 1.0000, 0.8894, 0.9430, 0.9767, 0.9882 ],
                                   [ 0.8999, 0.8894, 0.8587, 0.8099, 0.9541, 0.9430, 0.9105, 0.8587,
                                     0.9882, 0.9767, 0.9430, 0.8894, 1.0000, 0.9882, 0.9541, 0.8999 ],
                                   [ 0.8894, 0.8999, 0.8894, 0.8587, 0.9430, 0.9541, 0.9430, 0.9105,
                                     0.9767, 0.9882, 0.9767, 0.9430, 0.9882, 1.0000, 0.9882, 0.9541 ],
                                   [ 0.8587, 0.8894, 0.8999, 0.8894, 0.9105, 0.9430, 0.9541, 0.9430,
                                     0.9430, 0.9767, 0.9882, 0.9767, 0.9541, 0.9882, 1.0000, 0.9882 ],
                                   [ 0.8099, 0.8587, 0.8894, 0.8999, 0.8587, 0.9105, 0.9430, 0.9541,
                                     0.8894, 0.9430, 0.9767, 0.9882, 0.8999, 0.9541, 0.9882, 1.0000 ]]
                            },
                'Medium':   {   # Uplink - CoPolar - Medium => TS 38.104 V17.4.0 (2021-12), Table G.2.3.1.2-3
                            '2x2':[[ 1,    0.9,  0.3,  0.27 ],
                                   [ 0.9,  1,    0.27, 0.3  ],
                                   [ 0.3,  0.27, 1,    0.9  ],
                                   [ 0.27, 0.3,  0.9,  1    ]],
                            '2x4':[[ 1.0000, 0.9884, 0.9543, 0.9000, 0.3000, 0.2965, 0.2863, 0.2700 ],
                                   [ 0.9884, 1.0000, 0.9884, 0.9543, 0.2965, 0.3000, 0.2965, 0.2863 ],
                                   [ 0.9543, 0.9884, 1.0000, 0.9884, 0.2863, 0.2965, 0.3000, 0.2965 ],
                                   [ 0.9000, 0.9543, 0.9884, 1.0000, 0.2700, 0.2863, 0.2965, 0.3000 ],
                                   [ 0.3000, 0.2965, 0.2863, 0.2700, 1.0000, 0.9884, 0.9543, 0.9000 ],
                                   [ 0.2965, 0.3000, 0.2965, 0.2863, 0.9884, 1.0000, 0.9884, 0.9543 ],
                                   [ 0.2863, 0.2965, 0.3000, 0.2965, 0.9543, 0.9884, 1.0000, 0.9884 ],
                                   [ 0.2700, 0.2863, 0.2965, 0.3000, 0.9000, 0.9543, 0.9884, 1.0000 ]],
                            '4x4':[[ 1.0000, 0.9882, 0.9541, 0.8999, 0.8747, 0.8645, 0.8347, 0.7872,
                                     0.5855, 0.5787, 0.5588, 0.5270, 0.3000, 0.2965, 0.2862, 0.2700 ],
                                   [ 0.9882, 1.0000, 0.9882, 0.9541, 0.8645, 0.8747, 0.8645, 0.8347,
                                     0.5787, 0.5855, 0.5787, 0.5588, 0.2965, 0.3000, 0.2965, 0.2862 ],
                                   [ 0.9541, 0.9882, 1.0000, 0.9882, 0.8347, 0.8645, 0.8747, 0.8645,
                                     0.5588, 0.5787, 0.5855, 0.5787, 0.2862, 0.2965, 0.3000, 0.2965 ],
                                   [ 0.8999, 0.9541, 0.9882, 1.0000, 0.7872, 0.8347, 0.8645, 0.8747,
                                     0.5270, 0.5588, 0.5787, 0.5855, 0.2700, 0.2862, 0.2965, 0.3000 ],
                                   [ 0.8747, 0.8645, 0.8347, 0.7872, 1.0000, 0.9882, 0.9541, 0.8999,
                                     0.8747, 0.8645, 0.8347, 0.7872, 0.5855, 0.5787, 0.5588, 0.5270 ],
                                   [ 0.8645, 0.8747, 0.8645, 0.8347, 0.9882, 1.0000, 0.9882, 0.9541,
                                     0.8645, 0.8747, 0.8645, 0.8347, 0.5787, 0.5855, 0.5787, 0.5588 ],
                                   [ 0.8347, 0.8645, 0.8747, 0.8645, 0.9541, 0.9882, 1.0000, 0.9882,
                                     0.8347, 0.8645, 0.8747, 0.8645, 0.5588, 0.5787, 0.5855, 0.5787 ],
                                   [ 0.7872, 0.8347, 0.8645, 0.8747, 0.8999, 0.9541, 0.9882, 1.0000,
                                     0.7872, 0.8347, 0.8645, 0.8747, 0.5270, 0.5588, 0.5787, 0.5855 ],
                                   [ 0.5855, 0.5787, 0.5588, 0.5270, 0.8747, 0.8645, 0.8347, 0.7872,
                                     1.0000, 0.9882, 0.9541, 0.8999, 0.8747, 0.8645, 0.8347, 0.7872 ],
                                   [ 0.5787, 0.5855, 0.5787, 0.5588, 0.8645, 0.8747, 0.8645, 0.8347,
                                     0.9882, 1.0000, 0.9882, 0.9541, 0.8645, 0.8747, 0.8645, 0.8347 ],
                                   [ 0.5588, 0.5787, 0.5855, 0.5787, 0.8347, 0.8645, 0.8747, 0.8645,
                                     0.9541, 0.9882, 1.0000, 0.9882, 0.8347, 0.8645, 0.8747, 0.8645 ],
                                   [ 0.5270, 0.5588, 0.5787, 0.5855, 0.7872, 0.8347, 0.8645, 0.8747,
                                     0.8999, 0.9541, 0.9882, 1.0000, 0.7872, 0.8347, 0.8645, 0.8747 ],
                                   [ 0.3000, 0.2965, 0.2862, 0.2700, 0.5855, 0.5787, 0.5588, 0.5270,
                                     0.8747, 0.8645, 0.8347, 0.7872, 1.0000, 0.9882, 0.9541, 0.8999 ],
                                   [ 0.2965, 0.3000, 0.2965, 0.2862, 0.5787, 0.5855, 0.5787, 0.5588,
                                     0.8645, 0.8747, 0.8645, 0.8347, 0.9882, 1.0000, 0.9882, 0.9541 ],
                                   [ 0.2862, 0.2965, 0.3000, 0.2965, 0.5588, 0.5787, 0.5855, 0.5787,
                                     0.8347, 0.8645, 0.8747, 0.8645, 0.9541, 0.9882, 1.0000, 0.9882 ],
                                   [ 0.2700, 0.2862, 0.2965, 0.3000, 0.5270, 0.5588, 0.5787, 0.5855,
                                     0.7872, 0.8347, 0.8645, 0.8747, 0.8999, 0.9541, 0.9882, 1.0000 ]]
                            },
                'Low':      {   # Uplink - CoPolar - Low => TS 38.104 V17.4.0 (2021-12), Table G.2.3.1.2-4
                            '1x2': 2,
                            '1x4': 4,
                            '1x8': 8,
                            '2x2': 4,
                            '2x4': 8,
                            '2x8': 16,
                            '4x4': 16
                            }
                        },
            'CrossPolar':{
                'Low':     {   # Uplink - CrossPolar - Low => TS 38.104 V17.4.0 (2021-12), Table G.2.3.2.3-2
                            '1x8': 8,
                            '2x8': 16
                            }
                         }
                    }
                }

# **********************************************************************************************************************
# The alpha, beta, and gamma values from the 3GPP standard for different cases
alphBetaGamma = {
        'Downlink': {
            'CoPolar':   {  # TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.1.2-1
                'High':     (0.9, 0.9,      0),
                'Medium':   (0.3, 0.9,      0),
                'MediumA':  (0.3, 0.3874,   0),
                'Low':      (0.0, 0.0,      0)
                         },
            'CrossPolar':{  # TS 38.101-4 V17.4.0 (2022-03), Table B.2.3.2.2-1
                'High':     (0.9, 0.9, 0.3),
                'Medium':   (0.3, 0.6, 0.2)
                         }
                    },
        'Uplink':   {
            'CoPolar':   {  # TS 38.104 V17.4.0 (2021-12), Table G.2.3.1.2-1
                'High':     (0.9, 0.9, 0),
                'Medium':   (0.9, 0.3, 0),
                'Low':      (0.0, 0.0, 0)
                         },
            'CrossPolar':{  # TS 38.104 V17.4.0 (2021-12), Table G.2.3.2.3-1
                'Low':      (0.0, 0.0, 0.0)
                         }
                    }
                 }
                
# **********************************************************************************************************************
class TdlChannel(ChannelModel):
    r"""
    This class implements the Tapped Delay Line (TDL) channel model based on **3GPP TR 38.901**. It is derived from the
    :py:class:`~neoradium.channelmodel.ChannelModel` class.
    
    According to **3GPP TR 38.901**, TDL models are mostly used for simplified evaluations, typically for non-MIMO 
    cases. They are defined for the frequency range from 0.5 GHz to 100 GHz with a maximum bandwidth of 2 GHz.
    
    Although the TDL model is defined primarily for non-MIMO use cases, this implementation does support MIMO 
    configurations. However, unlike :py:class:`~neoradium.cdl.CdlChannel`, this model does not work with the antenna 
    classes :py:class:`~neoradium.antenna.AntennaPanel` or :py:class:`~neoradium.antenna.AntennaArray`. For TDL channel 
    models, you just need to specify the number of transmit and receive antennas.
    
    The typical use case involves instantiating a :py:class:`TdlChannel` object and then calling functions such as
    :py:meth:`~neoradium.channelmodel.ChannelModel.getChannelMatrix`,
    :py:meth:`~neoradium.channelmodel.ChannelModel.applyToSignal`,
    :py:meth:`~neoradium.channelmodel.ChannelModel.applyToGrid`. Refer to the notebook 
    :doc:`../Playground/Notebooks/Channels/TdlChannel` for an example of using this class. 
    """
    # ******************************************************************************************************************
    def __init__(self, bwp, profile='A', **kwargs):
        r"""
        Parameters
        ----------
        bwp : :py:class:`~neoradium.carrier.BandwidthPart` 
            The bandwidth part object used by the channel model to create channel matrices.
            
        profile : str or None
            The TDL profile name. It can be one of the following:
            
                * The TDL profile which is one of 'A', 'B', 'C', 'D', 'E'.
                
                * A string that specifies both profile and delay spread according to **3GPP TS 38.101-4**: 'A30', 
                  'B100', 'C60', 'C300', 'D30'. The numbers here are the delay spread in nano seconds. Note 
                  that the delay spread specified here overrides any value passed to the ``delaySpread`` parameter 
                  (See :py:class:`~neoradium.channelmodel.ChannelModel`)

                * A string that specifies profile, delay spread, and doppler shift according to **3GPP TS 38.101-4 
                  Table B.2.2-1** and **3GPP TS 38.101-4 Table B.2.2-2**. This includes 'A30-5', 'A30-10', 'B100-400',
                  'C300-100', 'C300-600', 'C300-1200', for FR1, and 'A30-35', 'A30-75', 'A30-300', 'C60-300', 'D30-75' 
                  for FR2. Note that the delay spread and doppler shift specified here overrides any values 
                  passed to the ``delaySpread`` and ``dopplerShift`` parameters (See 
                  :py:class:`~neoradium.channelmodel.ChannelModel`)
                  
                * `None` can be used to completely customize the TDL channel. See 
                  :ref:`Customizing TDL Model <CustomizingTDL>` below for more information.

        kwargs : dict
            Here’s a list of additional optional parameters that can be used to further customize this channel model:

                :normalizeGains: A boolean flag. The default value is `True`, indicating that the path gains 
                    are normalized before they are applied to the signals.
                    
                :normalizeOutput: A boolean flag. The default value is `True`, indicating that the gains are 
                    normalized based on the number of receive antennas.
                    
                :txDir: A string that represents the transmission direction, which can be either “Downlink” or 
                    “Uplink”. By default, it is set to “Downlink”.
                    
                :filterLen: The length of the channel filter. The default is 16 samples.
                
                :delayQuantSize: The delay fraction quantization size of the channel filter. The default is 64.
                
                :stopBandAtten: The stop-band attenuation value (in dB) used by the channel filter. The default 
                    is 80 dB.
                
                :seed: The seed used by the random functions in the channel model. Setting this to a fixed value ensures
                    that the channel model generates repeatable results. The default value is `None`, indicating 
                    that this channel model uses the **NeoRadium**’s :doc:`global random generator <./Random>`.

                :dopplerShift: The maximum Doppler shift in Hertz. The default value is 40 Hertz, which corresponds to
                    a speed of approximately 10 kilometers per hour. A value of zero makes the channel model static. 
                    For trajectory-based channel models, this value is automatically assigned based on the maximum 
                    trajectory speed.
                    
                :carrierFreq: The carrier frequency of the channel model in Hz. The default is 3.5 GHz.

                :delaySpread: The delay spread in nanoseconds. The default is 30 ns. It can also be a string 
                    containing one of the values in following table (See **3GPP TR 38.901 table 7.7.3-1**)
                    
                    ======================  ==============
                    Delay Spread str        Delay spread
                    ======================  ==============
                    'VeryShort'             10 ns
                    'Short'                 30 ns
                    'Nominal'               100 ns
                    'Long'                  300 ns
                    'VeryLong'              1000 ns
                    ======================  ==============

                :txAntennaCount: The number of transmitter antennas. Isotropic antenna elements are assumed. The 
                    default is 1.
                
                :rxAntennaCount: The number of receiver antennas. Isotropic antenna elements are assumed. The default 
                    is 1.

                :mimoCorrelation: Specifies the relative amount of MIMO correlation in MIMO use cases. It can be one 
                    of 'Low' (default), 'Medium', 'MediumA', 'MediumB', and 'High'. See
                    :ref:`Calculating Correlation Matrix <CalculatingCorrMat>` for more information.
                    
                :polarization: The polarization type for the MIMO use cases. It can be one of 'CoPolar'(default) or 
                    'CrossPolar'. See :ref:`Calculating Correlation Matrix <CalculatingCorrMat>` for more information.
                    
                :correlationMatrix: The correlation matrix. By default this implementation calculates the correlation 
                    matrix based on 3GPP standard using the given parameters such as ``mimoCorrelation`` and 
                    ``polarization``. However you can specify your own correlation matrix using this parameter. See
                    :ref:`Calculating Correlation Matrix <CalculatingCorrMat>` for more information.
                
                :kFactor: The K-Factor (in dB) used for scaling. The default is `None`. If not specified 
                    (``kFactor=None``), K-factor scaling is disabled.

                :sosType: The TDL model uses the Sum-of-Sinusoids method to calculate the channel gains. This 
                    implementation supports 2 different variations of this technique:
                    
                    * **`GMEDS1`**: The method introduced in the paper `"Two New Sum-of-Sinusoids-Based Methods for the
                      Efficient Generation of Multiple Uncorrelated Rayleigh Fading Waveforms"
                      <https://ieeexplore.ieee.org/document/5089993>`_. This is the default method.
                    
                    * **`Xiao`**: The method introduced in the paper `"Novel Sum-of-Sinusoids Simulation Models for 
                      Rayleigh and Rician Fading Channels" <https://ieeexplore.ieee.org/document/4027602>`_. 
                      Note that this is a stateless statistical model. Sequential application of this channel model 
                      may not always have smooth transition between the resulting channel gains.
                        
                :sosNumSins: The number of Sinusoids used in the Sum-of-Sinusoids algorithm. The default is 32.
                
                :pathDelays: Use this to customize or override the path delays which by default are set based on the 
                    TDL channel model as defined in **3GPP TR 38.901 Tables 7.7.2-1 to 7.7.2-5**. You
                    don't need to specify this parameter for most use cases. See
                    :ref:`Customizing TDL Model <CustomizingTDL>` below for more information.
                
                :pathPowers: Use this to customize or override the path powers which by default are set based on the 
                    TDL channel model as defined in **3GPP TR 38.901 Tables 7.7.2-1 to 7.7.2-5**. You
                    don't need to specify this parameter for most use cases. See 
                    :ref:`Customizing TDL Model <CustomizingTDL>` below for more information.

                :kFactorLos: The K-Factor ratio (in dB) for the LOS tap (1st tap). This value by default is set to 
                    ``(pathPowers[0]-pathPowers[1])``.

                :hasLos: Use this to customize or override the ``hasLos`` property of this channel model which by 
                    default is set based on the TDL channel model as defined in **3GPP TR 38.901**. You don't need to
                    specify this parameter for most use cases. See :ref:`Customizing TDL Model <CustomizingTDL>` below
                    for more information.


        **Other Properties:**
        
        All of the parameters mentioned above are directly available. Here is a list of additional properties:
        
            :coherenceTime: The `Coherence time <https://en.wikipedia.org/wiki/Coherence_time_(communications_systems)>`_
                of the channel model in seconds. This is calculated based on the ``dopplerShift`` parameter.
            :sampleRate: The sample rate used by this channel model. For 3GPP standard, this is set to 30,720,000 
                samples per second.
            :nrNt: A tuple of the form ``(nr,nt)``, where ``nr`` and ``nt`` are the number of receiver and transmitter 
                antenna elements, respectively. For TDL models, ``nr`` and ``nt`` are the same as ``rxAntennaCount``
                and ``txAntennaCount`` parameters.


        .. _CalculatingCorrMat:
        
        **Calculating Correlation Matrix:**
        
        For MIMO use cases, by default, this class uses the parameters such as ``mimoCorrelation`` and ``polarization``
        to calculate the correlation matrix based on the 3GPP standard documents. This implementation is based on the
        following documents:
            
            * 3GPP TS 38.101-4 Section B.2.3.2.1
            
            * 3GPP TS 38.101-4 Tables B.2.3.1.2-1 and B.2.3.2.2-1

            * 3GPP TS 38.104 Tables G.2.3.1.2-1 and G.2.3.2.3-1


        .. _CustomizingTDL:
        
        **Customizing TDL Model:**

        There are two different ways to customize the TDL model:
        
        a) You can choose one of the predefined TDL profiles (See the ``profile`` parameter above) and then modify the
           parameters of the model by passing in additional information. For example you can choose 'B100-400' for
           ``profile`` and then pass your own path delays to override the path delays specified in the standard.
           
        b) You can also define your own model completely from scratch. You first pass `None` for the ``profile`` 
           parameter and then specify all channel model parameters. Note that you **must** specify at least the
           following parameters in this case:
           
                * pathDelays
                * pathPowers
                * hasLos
            
           You can also optionally specify the following values:
           
                * kFactorLos (defaults to ``pathPowers[0]-pathPowers[1]``)
           
           Also note that if your channel model contains a LOS tap, it **must** be the first tap in the lists, and the
           ``hasLos`` parameter should be set to `True`.
        """
        super().__init__(bwp, **kwargs)

        # First check the combination models specified in TS 38.101-4 V17.4.0 (2022-03):
        fr1Profiles = ['A30-5', 'A30-10', 'B100-400', 'C300-100', 'C300-600', 'C300-1200']  # Table B.2.2-1  (FR1)
        fr2Profiles = ['A30-35', 'A30-75', 'A30-300', 'C60-300', 'D30-75']                  # Table B.2.2-2  (FR2)
        if profile in (fr1Profiles+fr2Profiles):
            profile, dopplerStr = profile.split('-')
            self.dopplerShift = int(dopplerStr)

        # Now check to see one of profiles specified in TS 38.101-4 V17.4.0 (2022-03):
        if profile in ['A30', 'B100', 'C60', 'C300', 'D30']:
            self.delaySpread = int(profile[1:])         # In nanoseconds
        
        if profile not in ['A', 'B', 'C', 'D', 'E', 'A30', 'B100', 'C60', 'C300', 'D30']:
            raise ValueError("Unsupported delay profile \"%s\"!"%(profile))
        self.profile = profile

        self.delaySpread = kwargs.get('delaySpread', 30)    # Default: 30ns
        if type(self.delaySpread)==str:
            # See TR38.901 - Table 7.7.3-1
            strToDelaySpread = {"VeryShort": 10, "Short": 30, "Nominal": 100, "Long": 300, "VeryLong": 1000}
            if self.delaySpread not in strToDelaySpread:
                raise ValueError("'delaySpread' must be a number or one of 'VeryShort', 'Short', 'Nominal', 'Long', "+
                                 "or 'VeryLong'")
            self.delaySpread = strToDelaySpread[self.delaySpread]

        # We always assume isotropic antennas for TDL.
        self.txAntennaCount = kwargs.get('txAntennaCount', 1)
        self.rxAntennaCount = kwargs.get('rxAntennaCount', 1)

        # K-factor scaling: (See the function "applyKFactorScaling" in the base class)
        self.kFactor = kwargs.get('kFactor', None)  # The K-factor for scaling in dB. 'None' disables K-factor scaling

        # Set the default values based on the profile. They can be overridden to create customized channels.
        def getTdlValue(x):
            return None if self.profile is None else np.float64(tapInfo[self.profile])[:,x]

        self.pathDelays = kwargs.get('pathDelays', getTdlValue(0))  # The normalized Path Delays. See "scaleDelays"
        self.pathPowers = kwargs.get('pathPowers', getTdlValue(1))  # Path Powers in dB
        self.hasLos = kwargs.get('hasLos', False) if self.profile is None else (self.profile[0] in "DE")
        self.kFactorLos = kwargs.get('kFactorLos',
                                     (self.pathPowers[0]-self.pathPowers[1]) if self.hasLos else None) # In dB

        if self.pathDelays is None:     raise ValueError("'pathDelays' is not specified for the custom TDL model!")
        if self.pathPowers is None:     raise ValueError("'pathPowers' is not specified for the custom TDL model!")
        if len(self.pathDelays)!=len(self.pathPowers):
            raise ValueError("Tap delays and powers must have the same size!")

        if self.profile is not None:
            self.scaleDelays()
            if self.kFactor is not None:    self.applyKFactorScaling()
        elif self.hasLos:
            # For custom models with LOS path, we split the first path into LOS and NLOS
            # Also note that it is assumed the custom values for powers and delays do not need angle and K-Factor
            # scaling
            k1st = toLinear(self.kFactorLos)
            p1st = toLinear(self.pathPowers[0])
            pathPowers1st = -toDb(p1st + p1st/k1st)
            self.pathPowers = np.concatenate( ([pathPowers1st, pathPowers1st-self.kFactorLos], self.pathPowers[1:]))
            self.pathDelays = np.concatenate(([self.pathDelays[0]], self.pathDelays))

        if self.hasLos:
            self.losDopplerShift = 0.7*self.dopplerShift    # This is fs (See TR38.901 - Section 7.7.2)
            
            # Combine first 2 taps (LOS/NLOS)
            self.pathPowers = np.concatenate( ([toDb( toLinear(self.pathPowers[:2]).sum() )],
                                               self.pathPowers[2:]) )
            self.pathDelays = np.concatenate( (self.pathDelays[0:1], self.pathDelays[2:]) )

        self.numPaths = len(self.pathDelays)

        self.mimoCorrelation = kwargs.get('mimoCorrelation', 'Low')
        if self.mimoCorrelation not in ['Low', 'Medium', 'MediumA', 'MediumB', 'High']:
            raise ValueError("Unsupported 'mimoCorrelation' (%s)."%(self.mimoCorrelation))

        self.polarization = kwargs.get('polarization', 'CoPolar')       # Can be one of 'CoPolar' or 'CrossPolar'
        if self.polarization not in ['CoPolar', 'CrossPolar']:
            raise ValueError(f"Unsupported 'polarization' ({self.polarization}). It must be 'CoPolar' or 'CrossPolar'.")
        
        self.correlationMatrix = kwargs.get('correlationMatrix', None)
        if self.correlationMatrix is None:
            self.correlationMatrix = self.getSpatialCorrelationMatrix()

        # Sum of Sinusoids parameters:
        self.sosType = kwargs.get('sosType', 'GMEDS1' )     # Can be 'GMEDS1' or 'Xiao'
        if self.sosType not in ['GMEDS1', 'Xiao']:
            raise ValueError(f"Unsupported 'sosType' ({self.sosType}). It must 'GMEDS1' or 'Xiao'.")
        self.sosNumSins = kwargs.get('sosNumSins', 32 )

        # Initial phases for the GMEDS1 SOS method
        nr, nt = self.nrNt
        # Uniform between 0,2𝛑, Shape: 1 x sosNumSins x nr x nt x numPaths
        self.sosTheta1N = self.rangen.random(size=(1, self.sosNumSins, nr, nt, self.numPaths))*2*np.pi
        
        # Uniform between 0,2𝛑, Shape: 1 x sosNumSins x nr x nt x numPaths
        self.sosTheta2N = self.rangen.random(size=(1, self.sosNumSins, nr, nt, self.numPaths))*2*np.pi

        self.restart()

    # ******************************************************************************************************************
    def __repr__(self):     return self.print(getStr=True)
    def print(self, indent=0, title=None, getStr=False):
        r"""
        Prints the properties of this CDL channel model object.

        Parameters
        ----------
        indent : int
            The number of indentation characters.
            
        title : str or None
            If specified, it serves as the title for the printed information. If `None` (the default), an 
            automatic title is generated based on the channel model parameters.

        getStr : Boolean
            If `True`, returns a text string instead of printing it.

        Returns
        -------
        None or str
            If the ``getStr`` parameter is `True`, then this function returns the information in a text string. 
            Otherwise, nothing is returned.
        """
        if title is None:
            if self.profile is None:    title = "Customized TDL Channel Properties:"
            else:                       title = f"TDL-{self.profile} Channel Properties:"

        repStr = "\n" if indent==0 else ""
        repStr += indent*' ' + title + "\n"
        repStr += indent*' ' + f"  carrierFreq:      {freqStr(self.carrierFreq)}\n"
        repStr += indent*' ' + f"  normalizeGains:   {str(self.normalizeGains)}\n"
        repStr += indent*' ' + f"  normalizeOutput:  {str(self.normalizeOutput)}\n"
        repStr += indent*' ' + f"  txDir:            {self.txDir}\n"
        repStr += indent*' ' + f"  filterLen:        {self.filterLen} samples\n"
        repStr += indent*' ' + f"  delayQuantSize:   {self.delayQuantSize}\n"
        repStr += indent*' ' + f"  stopBandAtten:    {self.stopBandAtten} dB\n"
        repStr += indent*' ' + f"  dopplerShift:     {freqStr(self.dopplerShift)}\n"
        repStr += indent*' ' + f"  coherenceTime:    {self.coherenceTime*1000:.3f} milliseconds\n"
        repStr += indent*' ' + f"  delaySpread:      {self.delaySpread} ns\n"
        repStr += getMultiLineStr("pathDelays (ns) ", self.pathDelays, indent, "%6f", 6, numPerLine=10)
        repStr += getMultiLineStr("pathPowers (dB) ", self.pathPowers, indent, "%6f", 6, numPerLine=10)
        repStr += indent*' ' + f"  hasLOS:           {self.hasLos}\n"

        if self.hasLos:
            repStr += indent*' ' + f"  kFactorLos (dB):  {self.kFactorLos:.3f}\n"

        repStr += indent*' ' + f"  rxAntennaCount:   {self.rxAntennaCount}\n"
        repStr += indent*' ' + f"  txAntennaCount:   {self.txAntennaCount}\n"

        repStr += indent*' ' + f"  mimoCorrelation:  {self.mimoCorrelation}\n"
        repStr += indent*' ' + f"  polarization:     {self.polarization}\n"

        repStr += indent*' ' + f"  sosType:          {self.sosType}\n"
        repStr += indent*' ' + f"  sosNumSins:       {self.sosNumSins}\n"

        if getStr: return repStr
        print(repStr)

    # ******************************************************************************************************************
    def restart(self, restartRanGen=False, applyToBwp=True):
        r"""
        This method first re-initializes the random object if a ``seed`` was provided to this channel model and the 
        ``restartRanGen`` parameter is set to `True`. Subsequently, it invokes the base class’s
        :py:meth:`~neoradium.channelmodel.ChannelModel.restart` method.

        Parameters
        ----------
        restartRanGen : Boolean
            If a ``seed`` was not provided to this channel model, this parameter is ignored. Otherwise, if 
            ``restartRanGen`` is set to `True`, this channel model's random generator is reset and if 
            ``restartRanGen`` is `False` (default), the random generator is not reset. This means if 
            ``restartRanGen`` is `False`, calling this function starts a new sequence of channel instances that 
            are different from the sequence when the channel was instantiated.
            
        applyToBwp : Boolean
            If set to `True` (the default), this function restarts the Bandwidth Part associated with this channel 
            model. Otherwise, the Bandwidth Part’s state remains unchanged.
        """
        if (self.seed is not None) and restartRanGen: self.rangen = random.getGenerator(self.seed)
        super().restart(restartRanGen, applyToBwp)

    # ******************************************************************************************************************
    @property           # This property is already documented above in the __init__ function.
    def nrNt(self):     return self.rxAntennaCount, self.txAntennaCount

    # ******************************************************************************************************************
    def scaleDelays(self):                          # Not documented
        # See TR38.901 - Sec. 7.7.3 Scaling of delays
        if self.profile in "ABCDE":     # Only if we have a normalized delay that needs to be scaled to nanoseconds
            self.pathDelays *= self.delaySpread     # Path delays in nanoseconds

    # ******************************************************************************************************************
    def sosXiao(self, sosSampleTimes):              # Not documented
        # This is based on the following paper:
        #   Novel Sum-of-Sinusoids Simulation Models for Rayleigh and Rician Fading Channels
        # Note: This is a statistical model. Sequential calls to 'getChannelGains' function may not always have
        # smooth transitions between the resulting gains.
        nr, nt = self.nrNt

        # See Section "C. An Improved Rayleigh Fading Channel Simulator" and Equations (6) and (7)
        # Using the common shape: numTimeSamples x numSin x nr x nt x numPath
        
        # Uniform between -𝛑,𝛑, Shape: 1 x sosNumSins x 1 x 1 x numPaths
        thetaN = self.rangen.random(size=(1, self.sosNumSins, 1, 1, self.numPaths))*2*np.pi - np.pi
        
        # Uniform between -𝛑,𝛑, Shape: 1 x sosNumSins x nr x nt x numPaths
        phiN   = self.rangen.random(size=(1, self.sosNumSins, nr, nt, self.numPaths))*2*np.pi - np.pi

        # See Equation (7) in the above paper. Shape: 1 x sosNumSins x nr x nt x numPath
        alphaN = (2 * np.pi * (np.arange(self.sosNumSins, dtype=np.float64).reshape(1,-1,1,1,1)+1) + thetaN)/  \
                 self.sosNumSins
        
        # Calculate the angles used in (6b) and (6c). Shape: sosNumSamples x sosNumSins x nr x nt x numPaths
        angles = 2 * np.pi * self.dopplerShift * sosSampleTimes * np.cos(alphaN) + phiN

        # Calculating final results based on (6a), (6b), and (6c). Shape: sosNumSamples x nr x nt x numPaths
        return np.sqrt(1/self.sosNumSins)*(np.cos(angles) + 1j*np.sin(angles)).sum(1)

    # ******************************************************************************************************************
    def sosGMEDS1(self, sosSampleTimes):        # Not documented
        # This is based on the following paper:
        #   Two New Sum-of-Sinusoids-Based Methods for the Efficient Generation of Multiple Uncorrelated Rayleigh Fading
        #   Waveforms

        # See equations (11) and (12) in the above paper
        # Using the common shape: numTimeSamples x numSin x nr x nt x numPath. Shape: 1 x sosNumSins x 1 x 1 x 1
        alphaIN = np.pi * (np.arange(self.sosNumSins, dtype=np.float64).reshape(1,-1,1,1,1)+.5)/(2*self.sosNumSins)
       
        # Shape: 1 x 1 x 1 x 1 x numPaths
        alphaI0 = np.pi * (np.arange(self.numPaths, dtype=np.float64).reshape(1,1,1,1,-1)+1)/  \
                          (4*self.sosNumSins*(self.numPaths+2))

        # Discrete Doppler frequencies. Shape: 1 x sosNumSins x 1 x 1 x numPaths
        f1N, f2N = 2 * np.pi * self.dopplerShift * np.cos([alphaIN+alphaI0, alphaIN-alphaI0])

        # See equation (2) in the above paper. Shape: sosNumSamples x nr x nt x numPaths
        return np.sqrt(2/self.sosNumSins)*(   np.cos(2*np.pi*f1N*sosSampleTimes + self.sosTheta1N) +
                                           1j*np.cos(2*np.pi*f2N*sosSampleTimes + self.sosTheta2N)).sum(1)

    # ******************************************************************************************************************
    def getPathGains(self):                     # Not documented (See the "getChannelGains" in the base class)
        nr, nt = self.nrNt
        numChannels = len(self.chanGainSamples)
        sosSampleTimes = self.chanGainSamples[:,None,None,None,None]/self.sampleRate
        
        if self.sosType == 'GMEDS1':    tapGains = self.sosGMEDS1(sosSampleTimes)   # A deterministic SOS simulation
        elif self.sosType == 'Xiao':    tapGains = self.sosXiao(sosSampleTimes)     # A statistical SOS simulation
        else:                           assert False, "Unsupported SOS type '%s'!"%(self.sosType)
        # tapGains now has a shape of:  numChannels x nr x nt x numPaths

        # Apply the correlation matrix:
        # If 'self.correlationMatrix' is a Scalar value, it means it is an identity matrix of the specified size. In
        # this case there is no need to apply the correlation matrix.
        if not np.isscalar(self.correlationMatrix):     # 'correlationMatrix' is an nt.nr by nt.nr square matrix
            if self.normalizeGains: corMat = (self.correlationMatrix * nt * nr / np.trace(self.correlationMatrix))
            else:                   corMat = self.correlationMatrix
            sqrtCorrelationMatrix = sqrtm(corMat)
        
            # The following has the same effect of doing dot products of (1 x nr.nt) matrices by (nr.nt x nr.nt)
            # matrices for all times and all paths which results in (1 x nr.nt) matrices.
            tapGains = (tapGains.reshape(numChannels,nr*nt,1,-1) *
                        sqrtCorrelationMatrix.reshape(1,nr*nt,nr*nt,1)).sum(1).reshape(numChannels,nr,nt,-1)

        # Apply the LOS path gains
        if self.hasLos:
            # Update the first path information with the LOS gains
            k1st = np.sqrt(toLinear(self.kFactorLos))
            chanTimes = self.chanGainSamples[:,None,None]/self.sampleRate
            tapGains[:,:,:,0] = (tapGains[:,:,:,0] +
                                 np.sqrt(k1st) * np.exp( 2j * np.pi * self.losDopplerShift * chanTimes))/np.sqrt(k1st+1)

        # Apply path powers:
        pN = toLinear(self.pathPowers)                                      # Shape: n     (linear power values)
        tapGains *= np.sqrt(pN).reshape(1,1,1,-1)                           # Shape: numChannels x nr x nt x numPaths

        return tapGains                                                     # Shape: numChannels x nr x nt x numPaths

    # ******************************************************************************************************************
    def getSpatialCorrelationMatrix(self):          # Not documented
        nr, nt = self.nrNt
        if nt*nr <= 1:  return 1                    # Non-MIMO case -> No matrix calculation is needed
        antConf = "%dx%d"%(nt, nr)

        ng, nu = (nt, nr) if self.txDir == 'Downlink' else (nr, nt)   # Get number of antennas at gNB and UE
        if self.polarization=='CrossPolar':   ng, nu = ng//2, nu//2

        # No pre-calculated matrix available => We need to calculate the matrix
        try:
            alpha, beta, gamma = alphBetaGamma[ self.txDir ][ self.polarization ][ self.mimoCorrelation ]
        except KeyError:
            assert 0,f"The combination '{self.txDir}, {self.polarization}, {self.mimoCorrelation}' is not supported!"
        
        # Calculating Correlation matrices at the gNB and UE sides
        # See TS 38.101-4 V17.4.0 (2022-03), Tables B.2.3.1.1-1, B.2.3.1.1-2, Sec. B.2.3.2.1, and
        # TS 38.104 V17.4.0 (2021-12), Tables G.2.3.1.1-1, G.2.3.1.1-2, Sec. G.2.3.2.2.1, Sec. G.2.3.2.2.2
        # Note: A Scalar value means an identity matrix of the specified size
        def powerMatrix(n): # This is used for a generalization of the matrices in the tables mentioned below
            return np.square(np.float64([ [(i-j)/(n-1) for j in range(n)] for i in range(n)]))
            
        if ng == 1: gnbCorrelationMatrix = 1
        else:       gnbCorrelationMatrix = ng if alpha==0 else alpha ** powerMatrix(ng)

        if nu == 1: ueCorrelationMatrix = 1
        else:       ueCorrelationMatrix = nu if beta==0 else beta ** powerMatrix(nu)

        if self.polarization=='CrossPolar':
            # Note that the order of nt/nr does not matter for Permutation Matrix because it is
            # used symmetrically in the formula
            pp = self.getPermutationMatrix()
            if self.txDir == 'Downlink':
                # See TS 38.101-4 V17.4.0 (2022-03), Section B.2.3.2.1
                gg = np.float64([[ 1,      0,      -gamma,0     ],
                                 [ 0,      1,      0,     gamma ],
                                 [ -gamma, 0,      1,     0     ],
                                 [ 0,      gamma,  0,     1     ]])
            else:
                # See TS 38.104 V17.4.0 (2021-12), Table G.2.3.2.1-1
                if nu==1:
                    gg = np.float64([[ 1,      -gamma],
                                     [ -gamma, 1,    ]])
                else:
                    gg = np.float64([[ 1,      -gamma, 0,     0     ],
                                     [ -gamma, 1,      0,     0     ],
                                     [ 0,      0,      1,     gamma ],
                                     [ 0,      0,      gamma, 1     ]])
            # Shapes:
            #   Rspat:  (nt.nr , nt.nr)
            #   P:      (nt.nr , nt.nr)
            #   RgNB    (nt/2 , nt/2)       - assuming downlink, otherwise (nr/2 , nr/2)
            #   Rue     (nr/2 , nr/2)       - assuming downlink, otherwise (nt/2 , nt/2)
            #   𝜞       (4,4)
            if np.isscalar(ueCorrelationMatrix):    ueCorrelationMatrix = np.eye(ueCorrelationMatrix)
            if np.isscalar(gnbCorrelationMatrix):   gnbCorrelationMatrix = np.eye(gnbCorrelationMatrix)
            if self.txDir == 'Downlink':
                rSpat = pp.dot(np.kron( np.kron(gnbCorrelationMatrix, gg), ueCorrelationMatrix)).dot(pp.T)
            else:
                rSpat = pp.dot(np.kron( np.kron(ueCorrelationMatrix, gg), gnbCorrelationMatrix)).dot(pp.T)
        elif np.isscalar(ueCorrelationMatrix) and np.isscalar(gnbCorrelationMatrix):
            # Identity matrix of size: ueCorrelationMatrix * gnbCorrelationMatrix:
            rSpat = ueCorrelationMatrix * gnbCorrelationMatrix
        else:
            if np.isscalar(ueCorrelationMatrix):    ueCorrelationMatrix = np.eye(ueCorrelationMatrix)
            if np.isscalar(gnbCorrelationMatrix):   gnbCorrelationMatrix = np.eye(gnbCorrelationMatrix)
            if self.txDir == 'Downlink':    rSpat = np.kron( gnbCorrelationMatrix, ueCorrelationMatrix )
            else:                           rSpat = np.kron( ueCorrelationMatrix, gnbCorrelationMatrix )
        
        rSpat = self.ensurePSD(rSpat)   # Ensure the correlation matrix is a positive semi-definite matrix
        return rSpat
        
    # ******************************************************************************************************************
    def ensurePSD(self, rSpat):                     # Not documented
        # rSpat may need to be adjusted to ensure the correlation matrix is positive semi-definite after
        # rounding to 4 digit
        nr, nt = self.nrNt
        antConf = "%dx%d"%(nt, nr)

        a = 0   # Positive semi-definite factor
        if self.txDir == 'Downlink':
            if self.polarization=='CoPolar':    # See TS 38.101-4 V17.4.0 (2022-03), Section B.2.3.1.2
                if self.mimoCorrelation == 'High':
                    if antConf == '4x2':            a = 0.00010
                    elif antConf == '4x4':          a = 0.00012
                elif self.mimoCorrelation == 'Medium':
                    if antConf == '2x4':            a = 0.00010
                    elif antConf == '4x4':          a = 0.00012
            
            else:   # CrossPolar                # See TS 38.101-4 V17.4.0 (2022-03), Section B.2.3.2.2
                if self.mimoCorrelation == 'High':
                    if antConf in ['8x2']:          a = 0.00010
        else:       # Uplink
            if self.polarization=='CoPolar':    # See TS 38.104 V17.4.0 (2021-12), Section G.2.3.1.2
                if self.mimoCorrelation == 'High':
                    if antConf == '2x4':            a = 0.00010
                    elif antConf == '4x4':          a = 0.00012
                elif self.mimoCorrelation == 'Medium':
                    if antConf == '4x4':            a = 0.00012
                    
        if a>0:
            if np.isscalar(rSpat):  rSpat = np.eye(rSpat)
            return (rSpat + a*np.eye(nt*nr))/(1.0+a)

        return rSpat

    # ******************************************************************************************************************
    def getPermutationMatrix(self):                 # Not documented
        # Getting the permutation matrix P:
        # See TS 38.101-4 V17.4.0 (2022-03), Section B.2.3.2.1
        
        # P is an Nt*Nr by Nt*Nr matrix
        assert self.polarization=='CrossPolar', \
               "The permutation Matrix is only used for the 'CrossPolar' polarization mode!"
        nr, nt = self.nrNt
        pp = np.zeros( (nt * nr, nt * nr), np.float64)
        a1,b1,a2,b2 = zip(*[(j*nr+i,         2*j*nr+i,
                             (j+nt//2)*nr+i, (2*j+1)*nr+i) for j in range(nt//2) for i in range(nr)])
        pp[a1+a2,b1+b2] = 1
        return pp
 
    # ******************************************************************************************************************
    def getPolarizationAngles(self):                # Not documented
        # See TS 38.101-4 V17.4.0 (2022-03), B.2.3.2
        assert self.polarization=='CrossPolar', \
               "The polarization Correlation Matrix is only used for the 'CrossPolar' polarization mode!"

        txPolAngles = [45, -45]     # This is used at gNB
        rxPolAngles = [90, 0]       # This is used at UE
        if self.txDir == 'Uplink':  txPolAngles, rxPolAngles = rxPolAngles, txPolAngles
        return txPolAngles, rxPolAngles
